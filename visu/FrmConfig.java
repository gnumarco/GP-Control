/*
 * frmConfig.java
 *
 * Created on 30 septembre 2002, 18:35
 */

/*
 * @author Mahler,Segond
 * @society Laboratoire D Informatique du Littoral - ULCO - Calais - FRANCE
 * @version 2.0.0
 *
 */
package visu;

import javax.swing.*;
import java.util.ArrayList;
import java.io.File;

public class FrmConfig extends javax.swing.JFrame implements constants.centre, constants.couleur, constants.balise, constants.fourmi {

    private final boolean dBug = true;
    private Memoire mem;

    private int[] flagAffich = new int[LENGTH_FLAG_AFFICH];
    private boolean concentrationSeuilAbsolu = false;

    private ArrayList listeJMenuItemParam = new ArrayList();

    /**
     * Creates new form frmConfig
     */
    public FrmConfig(Memoire m) {
        System.out.println("Nouvelle fenetre FrmConfig ");
        mem = m;
        for (int i = 0; i < flagAffich.length; i++) {
            flagAffich[i] = constants.valeurs_par_defaut.DEFAULT_FLAG_AFFICH[i];
        }

        initComponents();

        initCombinerGC();

        if (dBug) {
            System.out.println("frmConfig initComponents Ok ");
        }
        this.setDefaultCloseOperation(javax.swing.JFrame.DO_NOTHING_ON_CLOSE);
        this.setCommonBorder();

        this.setTitle(TITRE_FRMCONFIG);
    }

    public void setCommonBorder() {
        this.rootPane.setBorder(javax.swing.BorderFactory.createLineBorder(COLOR_BORDER_DEFAULT, 5));
        this.repaint();
    }

    public void setBorderSet() {
        this.rootPane.setBorder(javax.swing.BorderFactory.createLineBorder(COLOR_CFG_BORDER_SET_PARAM, 5));
        this.repaint();
    }

    public void setBorderGet() {
        this.rootPane.setBorder(javax.swing.BorderFactory.createLineBorder(COLOR_CFG_BORDER_GET_PARAM, 5));
        this.repaint();
    }

    public void setBorderModif() {
        this.rootPane.setBorder(javax.swing.BorderFactory.createLineBorder(COLOR_CFG_BORDER_MODIF_PARAM, 5));
        this.repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        btnGrpAffichCentre = new javax.swing.ButtonGroup();
        btnGrpGenFourmisEquipes = new javax.swing.ButtonGroup();
        btnGrpAFFichFond = new javax.swing.ButtonGroup();
        btnGrpConcentrationPhysique = new javax.swing.ButtonGroup();
        btnGrpSeuilConcentrationPhysique = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPaneGeom = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPaneC = new javax.swing.JTabbedPane();
        jPanelT = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        jLabel51 = new javax.swing.JLabel();
        jPanel913 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel523 = new javax.swing.JLabel();
        jLabel413 = new javax.swing.JLabel();
        jSlider16 = new javax.swing.JSlider();
        jCheckBox173 = new javax.swing.JCheckBox();
        jTextField173 = new javax.swing.JTextField();
        jSlider113 = new javax.swing.JSlider();
        jCheckBox213 = new javax.swing.JCheckBox();
        jTextField213 = new javax.swing.JTextField();
        jSlider123 = new javax.swing.JSlider();
        jCheckBox313 = new javax.swing.JCheckBox();
        jTextField313 = new javax.swing.JTextField();
        jSlider133 = new javax.swing.JSlider();
        jCheckBox413 = new javax.swing.JCheckBox();
        jTextField413 = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel914 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel524 = new javax.swing.JLabel();
        jLabel414 = new javax.swing.JLabel();
        jSlider17 = new javax.swing.JSlider();
        jCheckBox174 = new javax.swing.JCheckBox();
        jTextField174 = new javax.swing.JTextField();
        jSlider114 = new javax.swing.JSlider();
        jCheckBox214 = new javax.swing.JCheckBox();
        jTextField214 = new javax.swing.JTextField();
        jSlider124 = new javax.swing.JSlider();
        jCheckBox314 = new javax.swing.JCheckBox();
        jTextField314 = new javax.swing.JTextField();
        jSlider134 = new javax.swing.JSlider();
        jCheckBox414 = new javax.swing.JCheckBox();
        jTextField414 = new javax.swing.JTextField();
        jPanelS = new javax.swing.JPanel();
        jPanel811 = new javax.swing.JPanel();
        jLabel5111 = new javax.swing.JLabel();
        jPanel911 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel521 = new javax.swing.JLabel();
        jLabel411 = new javax.swing.JLabel();
        jSlider14 = new javax.swing.JSlider();
        jCheckBox171 = new javax.swing.JCheckBox();
        jTextField171 = new javax.swing.JTextField();
        jSlider111 = new javax.swing.JSlider();
        jCheckBox211 = new javax.swing.JCheckBox();
        jTextField211 = new javax.swing.JTextField();
        jSlider121 = new javax.swing.JSlider();
        jCheckBox311 = new javax.swing.JCheckBox();
        jTextField311 = new javax.swing.JTextField();
        jSlider131 = new javax.swing.JSlider();
        jCheckBox411 = new javax.swing.JCheckBox();
        jTextField411 = new javax.swing.JTextField();
        jPanel511 = new javax.swing.JPanel();
        jLabel311 = new javax.swing.JLabel();
        jPanel912 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jLabel522 = new javax.swing.JLabel();
        jLabel412 = new javax.swing.JLabel();
        jSlider15 = new javax.swing.JSlider();
        jCheckBox172 = new javax.swing.JCheckBox();
        jTextField172 = new javax.swing.JTextField();
        jSlider112 = new javax.swing.JSlider();
        jCheckBox212 = new javax.swing.JCheckBox();
        jTextField212 = new javax.swing.JTextField();
        jSlider122 = new javax.swing.JSlider();
        jCheckBox312 = new javax.swing.JCheckBox();
        jTextField312 = new javax.swing.JTextField();
        jSlider132 = new javax.swing.JSlider();
        jCheckBox412 = new javax.swing.JCheckBox();
        jTextField412 = new javax.swing.JTextField();
        jPanelF = new javax.swing.JPanel();
        jPanel81 = new javax.swing.JPanel();
        jLabel511 = new javax.swing.JLabel();
        jPanel91 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel52 = new javax.swing.JLabel();
        jLabel41 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();
        jCheckBox17 = new javax.swing.JCheckBox();
        jTextField17 = new javax.swing.JTextField();
        jSlider11 = new javax.swing.JSlider();
        jCheckBox21 = new javax.swing.JCheckBox();
        jTextField21 = new javax.swing.JTextField();
        jSlider12 = new javax.swing.JSlider();
        jCheckBox31 = new javax.swing.JCheckBox();
        jTextField31 = new javax.swing.JTextField();
        jSlider13 = new javax.swing.JSlider();
        jCheckBox41 = new javax.swing.JCheckBox();
        jTextField41 = new javax.swing.JTextField();
        jPanel51 = new javax.swing.JPanel();
        jLabel31 = new javax.swing.JLabel();
        jPanel915 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel525 = new javax.swing.JLabel();
        jLabel415 = new javax.swing.JLabel();
        jSlider18 = new javax.swing.JSlider();
        jCheckBox175 = new javax.swing.JCheckBox();
        jTextField175 = new javax.swing.JTextField();
        jSlider115 = new javax.swing.JSlider();
        jCheckBox215 = new javax.swing.JCheckBox();
        jTextField215 = new javax.swing.JTextField();
        jSlider125 = new javax.swing.JSlider();
        jCheckBox315 = new javax.swing.JCheckBox();
        jTextField315 = new javax.swing.JTextField();
        jSlider135 = new javax.swing.JSlider();
        jCheckBox415 = new javax.swing.JCheckBox();
        jTextField415 = new javax.swing.JTextField();
        jPanelOpt = new javax.swing.JPanel();
        jRadioBtnAffCPile = new javax.swing.JRadioButton();
        jRadioBtnAffCPileAnime = new javax.swing.JRadioButton();
        jRadioBtnAffCCamembert = new javax.swing.JRadioButton();
        jRadioBtnAffCCamembertAnime = new javax.swing.JRadioButton();
        jCheckBoxCombine = new javax.swing.JCheckBox();
        jTextFieldCombine = new javax.swing.JTextField();
        jPanelFourmisBasique = new javax.swing.JPanel();
        CoeffEvapLabel = new javax.swing.JLabel();
        jTextFieldCoeffEvap = new javax.swing.JTextField();
        QtePheromoneLabel = new javax.swing.JLabel();
        jTextFieldDepotPheromone = new javax.swing.JTextField();
        jRadioButtonNbGen = new javax.swing.JRadioButton();
        jTextFieldNbGen = new javax.swing.JTextField();
        NbFourmisLabel = new javax.swing.JLabel();
        jTextFieldNbFourmisDistinctes = new javax.swing.JTextField();
        jCheckBoxBiais = new javax.swing.JCheckBox();
        jTextFieldBiais = new javax.swing.JTextField();
        jCheckBoxVoirPheromone = new javax.swing.JCheckBox();
        jCheckBoxVoirBoucles = new javax.swing.JCheckBox();
        jCheckBoxVoirCentreBoucle = new javax.swing.JCheckBox();
        jCheckBoxLegendeSpeFourmi = new javax.swing.JCheckBox();
        jRadioButtonInitSyst = new javax.swing.JRadioButton();
        NbFourmisParEspeceLabel = new javax.swing.JLabel();
        NbFourmisParEspeceTextfield = new javax.swing.JTextField();
        jTabbedPanePhysique = new javax.swing.JTabbedPane();
        jPanelFond = new javax.swing.JPanel();
        jRadioBtnAffFondRien = new javax.swing.JRadioButton();
        jRadioBtnAffFondNS = new javax.swing.JRadioButton();
        jRadioBtnAffFondEO = new javax.swing.JRadioButton();
        jRadioBtnAffFondNorme = new javax.swing.JRadioButton();
        jRadioBtnAffFondCurl = new javax.swing.JRadioButton();
        jRadioBtnAffFondDiv = new javax.swing.JRadioButton();
        jRadioBtnAffFondCurlCU = new javax.swing.JRadioButton();
        jRadioBtnAffFondDivCU = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel916 = new javax.swing.JPanel();
        jCheckBoxExtremaCurl = new javax.swing.JCheckBox();
        jCheckBoxExtremaCurlCU = new javax.swing.JCheckBox();
        jCheckBoxExtremaDiv = new javax.swing.JCheckBox();
        jCheckBoxExtremaDivCU = new javax.swing.JCheckBox();
        jPanel3 = new javax.swing.JPanel();
        jPanel917 = new javax.swing.JPanel();
        jCheckBoxAfficherConcentrationPhysique = new javax.swing.JCheckBox();
        jRadioBtnConcentrationCurl = new javax.swing.JRadioButton();
        jRadioBtnConcentrationCurlCU = new javax.swing.JRadioButton();
        jRadioBtnConcentrationDiv = new javax.swing.JRadioButton();
        jRadioBtnConcentrationDivCU = new javax.swing.JRadioButton();
        jPaneltypeSeuil = new javax.swing.JPanel();
        jRadioBtnSeuilConcentrationAbsolu = new javax.swing.JRadioButton();
        jRadioBtnSeuilConcentrationProportionnel = new javax.swing.JRadioButton();
        CoeffSegSeuillabel = new javax.swing.JLabel();
        jTextFieldSegSeuil = new javax.swing.JTextField();
        CoeffSegCompactLabel = new javax.swing.JLabel();
        jTextFieldSegCompacite = new javax.swing.JTextField();
        jCheckBoxSuivi = new javax.swing.JCheckBox();
        jPanelUseMethod = new javax.swing.JPanel();
        jCheckBoxUseMethodGeom = new javax.swing.JCheckBox();
        jCheckBoxUseMethodFourmi = new javax.swing.JCheckBox();
        jCheckBoxUseMethodPhysique = new javax.swing.JCheckBox();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemAjoutCarte = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jMenuItemAjoutBacth = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItemExporterCfg = new javax.swing.JMenuItem();
        jMenuItemImporterCfg = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jMenuItemAjouterCfg = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jMenuFin = new javax.swing.JMenu();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        jTabbedPane1.setMinimumSize(new java.awt.Dimension(315, 464));
        jTabbedPane1.setName("fourmi");
        jTabbedPane1.setPreferredSize(new java.awt.Dimension(300, 500));
        jTabbedPaneGeom.setBackground(new java.awt.Color(255, 255, 204));
        jTabbedPaneGeom.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPaneGeom.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPaneGeom.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanel2.setLayout(new java.awt.BorderLayout(10, 20));

        jPanel2.setBackground(new java.awt.Color(153, 204, 255));
        jTabbedPaneC.setPreferredSize(new java.awt.Dimension(0, 0));
        jPanelT.setLayout(new java.awt.GridLayout(2, 1, 1, 10));

        jPanel8.setLayout(new java.awt.BorderLayout(1, 1));

        jPanel8.setBackground(new java.awt.Color(0, 0, 0));
        jPanel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setBackground(new java.awt.Color(10, 10, 10));
        jLabel51.setForeground(new java.awt.Color(250, 250, 250));
        jLabel51.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel51.setText("Somme des Vecteurs Tangents");
        jLabel51.setOpaque(true);
        jPanel8.add(jLabel51, java.awt.BorderLayout.NORTH);

        jPanel913.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel913.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Pond\u00e9ration");
        jLabel13.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel13.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel913.add(jLabel13);

        jLabel523.setBackground(new java.awt.Color(0, 0, 0));
        jLabel523.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel523.setText("Type de centre");
        jPanel913.add(jLabel523);

        jLabel413.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel413.setText("Pr\u00e9cision");
        jPanel913.add(jLabel413);

        jSlider16.setMajorTickSpacing(1);
        jSlider16.setMaximum(2);
        jSlider16.setMinorTickSpacing(1);
        jSlider16.setPaintLabels(true);
        jSlider16.setSnapToTicks(true);
        jSlider16.setValue(1);
        jSlider16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jSlider16.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jSlider16PropertyChange(evt);
            }
        });

        jPanel913.add(jSlider16);

        jCheckBox173.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox173.setText(" +");
        jCheckBox173.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox173.setActionCommand(" + ");
        jCheckBox173.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox173.setBorderPainted(true);
        jCheckBox173.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox173.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel913.add(jCheckBox173);

        jTextField173.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField173.setText("0.0");
        jTextField173.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jTextField173);

        jSlider113.setMajorTickSpacing(1);
        jSlider113.setMaximum(2);
        jSlider113.setMinorTickSpacing(1);
        jSlider113.setPaintLabels(true);
        jSlider113.setSnapToTicks(true);
        jSlider113.setValue(1);
        jSlider113.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jSlider113);

        jCheckBox213.setText(" X");
        jCheckBox213.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox213.setActionCommand(" x ");
        jCheckBox213.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox213.setBorderPainted(true);
        jCheckBox213.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox213.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel913.add(jCheckBox213);

        jTextField213.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField213.setText("0.0");
        jTextField213.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jTextField213);

        jSlider123.setMajorTickSpacing(1);
        jSlider123.setMaximum(2);
        jSlider123.setMinorTickSpacing(1);
        jSlider123.setPaintLabels(true);
        jSlider123.setSnapToTicks(true);
        jSlider123.setValue(1);
        jSlider123.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jSlider123);

        jCheckBox313.setText(" O");
        jCheckBox313.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox313.setActionCommand(" O ");
        jCheckBox313.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox313.setBorderPainted(true);
        jCheckBox313.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox313.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel913.add(jCheckBox313);

        jTextField313.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField313.setText("0.0");
        jTextField313.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jTextField313);

        jSlider133.setMajorTickSpacing(1);
        jSlider133.setMaximum(2);
        jSlider133.setMinorTickSpacing(1);
        jSlider133.setPaintLabels(true);
        jSlider133.setSnapToTicks(true);
        jSlider133.setValue(1);
        jSlider133.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jSlider133);

        jCheckBox413.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox413.setText(" []");
        jCheckBox413.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox413.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox413.setBorderPainted(true);
        jCheckBox413.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox413.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel913.add(jCheckBox413);

        jTextField413.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField413.setText("0.0");
        jTextField413.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel913.add(jTextField413);

        jPanel8.add(jPanel913, java.awt.BorderLayout.CENTER);

        jPanelT.add(jPanel8);

        jPanel5.setLayout(new java.awt.BorderLayout(1, 1));

        jPanel5.setBackground(new java.awt.Color(100, 100, 100));
        jPanel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setBackground(new java.awt.Color(10, 10, 10));
        jLabel3.setForeground(new java.awt.Color(250, 250, 250));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(" Vecteurs Unitaires");
        jLabel3.setAutoscrolls(true);
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.setOpaque(true);
        jPanel5.add(jLabel3, java.awt.BorderLayout.NORTH);

        jPanel914.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel914.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Pond\u00e9ration");
        jLabel14.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel14.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel914.add(jLabel14);

        jLabel524.setBackground(new java.awt.Color(0, 0, 0));
        jLabel524.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel524.setText("Type de centre");
        jPanel914.add(jLabel524);

        jLabel414.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel414.setText("Pr\u00e9cision");
        jPanel914.add(jLabel414);

        jSlider17.setMajorTickSpacing(1);
        jSlider17.setMaximum(2);
        jSlider17.setMinorTickSpacing(1);
        jSlider17.setPaintLabels(true);
        jSlider17.setSnapToTicks(true);
        jSlider17.setValue(1);
        jSlider17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jSlider17);

        jCheckBox174.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox174.setText(" +");
        jCheckBox174.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox174.setActionCommand(" + ");
        jCheckBox174.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox174.setBorderPainted(true);
        jCheckBox174.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox174.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel914.add(jCheckBox174);

        jTextField174.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField174.setText("0.0");
        jTextField174.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jTextField174);

        jSlider114.setMajorTickSpacing(1);
        jSlider114.setMaximum(2);
        jSlider114.setMinorTickSpacing(1);
        jSlider114.setPaintLabels(true);
        jSlider114.setSnapToTicks(true);
        jSlider114.setValue(1);
        jSlider114.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jSlider114);

        jCheckBox214.setText(" X");
        jCheckBox214.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox214.setActionCommand(" x ");
        jCheckBox214.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox214.setBorderPainted(true);
        jCheckBox214.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox214.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel914.add(jCheckBox214);

        jTextField214.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField214.setText("0.2");
        jTextField214.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jTextField214);

        jSlider124.setMajorTickSpacing(1);
        jSlider124.setMaximum(2);
        jSlider124.setMinorTickSpacing(1);
        jSlider124.setPaintLabels(true);
        jSlider124.setSnapToTicks(true);
        jSlider124.setValue(1);
        jSlider124.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jSlider124);

        jCheckBox314.setText(" O");
        jCheckBox314.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox314.setActionCommand(" O ");
        jCheckBox314.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox314.setBorderPainted(true);
        jCheckBox314.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox314.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel914.add(jCheckBox314);

        jTextField314.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField314.setText("0.0");
        jTextField314.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jTextField314);

        jSlider134.setMajorTickSpacing(1);
        jSlider134.setMaximum(2);
        jSlider134.setMinorTickSpacing(1);
        jSlider134.setPaintLabels(true);
        jSlider134.setSnapToTicks(true);
        jSlider134.setValue(1);
        jSlider134.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jSlider134);

        jCheckBox414.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox414.setText(" []");
        jCheckBox414.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox414.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox414.setBorderPainted(true);
        jCheckBox414.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox414.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel914.add(jCheckBox414);

        jTextField414.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField414.setText("0.0");
        jTextField414.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel914.add(jTextField414);

        jPanel5.add(jPanel914, java.awt.BorderLayout.CENTER);

        jPanelT.add(jPanel5);

        jTabbedPaneC.addTab("Vecteurs Tangents", jPanelT);

        jPanelS.setLayout(new java.awt.GridLayout(2, 1, 0, 10));

        jPanelS.setForeground(new java.awt.Color(255, 255, 255));
        jPanel811.setLayout(new java.awt.BorderLayout());

        jPanel811.setBackground(new java.awt.Color(0, 0, 0));
        jPanel811.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5111.setBackground(new java.awt.Color(10, 10, 10));
        jLabel5111.setForeground(new java.awt.Color(250, 250, 250));
        jLabel5111.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5111.setText("Somme ArrayListielle ");
        jLabel5111.setOpaque(true);
        jPanel811.add(jLabel5111, java.awt.BorderLayout.NORTH);

        jPanel911.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel911.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Pond\u00e9ration");
        jLabel11.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel911.add(jLabel11);

        jLabel521.setBackground(new java.awt.Color(0, 0, 0));
        jLabel521.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel521.setText("Type de centre");
        jPanel911.add(jLabel521);

        jLabel411.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel411.setText("Pr\u00e9cision");
        jPanel911.add(jLabel411);

        jSlider14.setMajorTickSpacing(1);
        jSlider14.setMaximum(2);
        jSlider14.setMinorTickSpacing(1);
        jSlider14.setPaintLabels(true);
        jSlider14.setSnapToTicks(true);
        jSlider14.setValue(1);
        jSlider14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jSlider14);

        jCheckBox171.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox171.setText(" +");
        jCheckBox171.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox171.setActionCommand(" + ");
        jCheckBox171.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox171.setBorderPainted(true);
        jCheckBox171.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox171.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel911.add(jCheckBox171);

        jTextField171.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField171.setText("0.0");
        jTextField171.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jTextField171);

        jSlider111.setMajorTickSpacing(1);
        jSlider111.setMaximum(2);
        jSlider111.setMinorTickSpacing(1);
        jSlider111.setPaintLabels(true);
        jSlider111.setSnapToTicks(true);
        jSlider111.setValue(1);
        jSlider111.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jSlider111);

        jCheckBox211.setText(" X");
        jCheckBox211.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox211.setActionCommand(" x ");
        jCheckBox211.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox211.setBorderPainted(true);
        jCheckBox211.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox211.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel911.add(jCheckBox211);

        jTextField211.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField211.setText("0.0");
        jTextField211.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jTextField211);

        jSlider121.setMajorTickSpacing(1);
        jSlider121.setMaximum(2);
        jSlider121.setMinorTickSpacing(1);
        jSlider121.setPaintLabels(true);
        jSlider121.setSnapToTicks(true);
        jSlider121.setValue(1);
        jSlider121.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jSlider121);

        jCheckBox311.setText(" O");
        jCheckBox311.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox311.setActionCommand(" O ");
        jCheckBox311.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox311.setBorderPainted(true);
        jCheckBox311.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox311.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel911.add(jCheckBox311);

        jTextField311.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField311.setText("0.0");
        jTextField311.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jTextField311);

        jSlider131.setMajorTickSpacing(1);
        jSlider131.setMaximum(2);
        jSlider131.setMinorTickSpacing(1);
        jSlider131.setPaintLabels(true);
        jSlider131.setSnapToTicks(true);
        jSlider131.setValue(1);
        jSlider131.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jSlider131);

        jCheckBox411.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox411.setText(" []");
        jCheckBox411.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox411.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox411.setBorderPainted(true);
        jCheckBox411.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox411.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel911.add(jCheckBox411);

        jTextField411.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField411.setText("0.0");
        jTextField411.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel911.add(jTextField411);

        jPanel811.add(jPanel911, java.awt.BorderLayout.CENTER);

        jPanelS.add(jPanel811);

        jPanel511.setLayout(new java.awt.BorderLayout());

        jPanel511.setBackground(new java.awt.Color(100, 100, 100));
        jPanel511.setForeground(new java.awt.Color(255, 255, 255));
        jLabel311.setBackground(new java.awt.Color(10, 10, 10));
        jLabel311.setForeground(new java.awt.Color(250, 250, 250));
        jLabel311.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel311.setText(" Vecteurs Unitaires");
        jLabel311.setAutoscrolls(true);
        jLabel311.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel311.setOpaque(true);
        jPanel511.add(jLabel311, java.awt.BorderLayout.NORTH);

        jPanel912.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel912.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Pond\u00e9ration");
        jLabel12.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel12.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel912.add(jLabel12);

        jLabel522.setBackground(new java.awt.Color(0, 0, 0));
        jLabel522.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel522.setText("Type de centre");
        jPanel912.add(jLabel522);

        jLabel412.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel412.setText("Pr\u00e9cision");
        jPanel912.add(jLabel412);

        jSlider15.setMajorTickSpacing(1);
        jSlider15.setMaximum(2);
        jSlider15.setMinorTickSpacing(1);
        jSlider15.setPaintLabels(true);
        jSlider15.setSnapToTicks(true);
        jSlider15.setValue(1);
        jSlider15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jSlider15);

        jCheckBox172.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox172.setText(" +");
        jCheckBox172.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox172.setActionCommand(" + ");
        jCheckBox172.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox172.setBorderPainted(true);
        jCheckBox172.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox172.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel912.add(jCheckBox172);

        jTextField172.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField172.setText("0.0");
        jTextField172.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jTextField172);

        jSlider112.setMajorTickSpacing(1);
        jSlider112.setMaximum(2);
        jSlider112.setMinorTickSpacing(1);
        jSlider112.setPaintLabels(true);
        jSlider112.setSnapToTicks(true);
        jSlider112.setValue(1);
        jSlider112.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jSlider112);

        jCheckBox212.setText(" X");
        jCheckBox212.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox212.setActionCommand(" x ");
        jCheckBox212.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox212.setBorderPainted(true);
        jCheckBox212.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox212.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel912.add(jCheckBox212);

        jTextField212.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField212.setText("0.0");
        jTextField212.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jTextField212);

        jSlider122.setMajorTickSpacing(1);
        jSlider122.setMaximum(2);
        jSlider122.setMinorTickSpacing(1);
        jSlider122.setPaintLabels(true);
        jSlider122.setSnapToTicks(true);
        jSlider122.setValue(1);
        jSlider122.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jSlider122);

        jCheckBox312.setText(" O");
        jCheckBox312.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox312.setActionCommand(" O ");
        jCheckBox312.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox312.setBorderPainted(true);
        jCheckBox312.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox312.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel912.add(jCheckBox312);

        jTextField312.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField312.setText("0.0");
        jTextField312.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jTextField312);

        jSlider132.setMajorTickSpacing(1);
        jSlider132.setMaximum(2);
        jSlider132.setMinorTickSpacing(1);
        jSlider132.setPaintLabels(true);
        jSlider132.setSnapToTicks(true);
        jSlider132.setValue(1);
        jSlider132.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jSlider132);

        jCheckBox412.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox412.setText(" []");
        jCheckBox412.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox412.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox412.setBorderPainted(true);
        jCheckBox412.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox412.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel912.add(jCheckBox412);

        jTextField412.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField412.setText("0.0");
        jTextField412.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel912.add(jTextField412);

        jPanel511.add(jPanel912, java.awt.BorderLayout.CENTER);

        jPanelS.add(jPanel511);

        jTabbedPaneC.addTab("Vecteurs", jPanelS);

        jPanelF.setLayout(new java.awt.GridLayout(2, 1, 0, 10));

        jPanel81.setLayout(new java.awt.BorderLayout());

        jPanel81.setBackground(new java.awt.Color(0, 0, 0));
        jPanel81.setForeground(new java.awt.Color(255, 255, 255));
        jLabel511.setBackground(new java.awt.Color(10, 10, 10));
        jLabel511.setForeground(new java.awt.Color(250, 250, 250));
        jLabel511.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel511.setText("Somme des Vecteurs Centrifuges");
        jLabel511.setOpaque(true);
        jPanel81.add(jLabel511, java.awt.BorderLayout.NORTH);

        jPanel91.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel91.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Pond\u00e9ration");
        jLabel1.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel91.add(jLabel1);

        jLabel52.setBackground(new java.awt.Color(0, 0, 0));
        jLabel52.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel52.setText("Type de centre");
        jPanel91.add(jLabel52);

        jLabel41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel41.setText("Pr\u00e9cision");
        jPanel91.add(jLabel41);

        jSlider1.setMajorTickSpacing(1);
        jSlider1.setMaximum(2);
        jSlider1.setMinorTickSpacing(1);
        jSlider1.setPaintLabels(true);
        jSlider1.setSnapToTicks(true);
        jSlider1.setValue(1);
        jSlider1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jSlider1);

        jCheckBox17.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox17.setText(" +");
        jCheckBox17.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox17.setActionCommand(" + ");
        jCheckBox17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox17.setBorderPainted(true);
        jCheckBox17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox17.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel91.add(jCheckBox17);

        jTextField17.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField17.setText("0.0");
        jTextField17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jTextField17);

        jSlider11.setMajorTickSpacing(1);
        jSlider11.setMaximum(2);
        jSlider11.setMinorTickSpacing(1);
        jSlider11.setPaintLabels(true);
        jSlider11.setSnapToTicks(true);
        jSlider11.setValue(1);
        jSlider11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jSlider11);

        jCheckBox21.setText(" X");
        jCheckBox21.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox21.setActionCommand(" x ");
        jCheckBox21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox21.setBorderPainted(true);
        jCheckBox21.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox21.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel91.add(jCheckBox21);

        jTextField21.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField21.setText("0.0");
        jTextField21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jTextField21);

        jSlider12.setMajorTickSpacing(1);
        jSlider12.setMaximum(2);
        jSlider12.setMinorTickSpacing(1);
        jSlider12.setPaintLabels(true);
        jSlider12.setSnapToTicks(true);
        jSlider12.setValue(1);
        jSlider12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jSlider12);

        jCheckBox31.setText(" O");
        jCheckBox31.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox31.setActionCommand(" O ");
        jCheckBox31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox31.setBorderPainted(true);
        jCheckBox31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox31.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel91.add(jCheckBox31);

        jTextField31.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField31.setText("0.0");
        jTextField31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jTextField31);

        jSlider13.setMajorTickSpacing(1);
        jSlider13.setMaximum(2);
        jSlider13.setMinorTickSpacing(1);
        jSlider13.setPaintLabels(true);
        jSlider13.setSnapToTicks(true);
        jSlider13.setValue(1);
        jSlider13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jSlider13);

        jCheckBox41.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox41.setText(" []");
        jCheckBox41.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox41.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox41.setBorderPainted(true);
        jCheckBox41.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox41.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel91.add(jCheckBox41);

        jTextField41.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField41.setText("0.0");
        jTextField41.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel91.add(jTextField41);

        jPanel81.add(jPanel91, java.awt.BorderLayout.CENTER);

        jPanelF.add(jPanel81);

        jPanel51.setLayout(new java.awt.BorderLayout());

        jPanel51.setBackground(new java.awt.Color(100, 100, 100));
        jPanel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel31.setBackground(new java.awt.Color(10, 10, 10));
        jLabel31.setForeground(new java.awt.Color(250, 250, 250));
        jLabel31.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel31.setText(" Vecteurs Unitaires");
        jLabel31.setAutoscrolls(true);
        jLabel31.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel31.setOpaque(true);
        jPanel51.add(jLabel31, java.awt.BorderLayout.NORTH);

        jPanel915.setLayout(new java.awt.GridLayout(5, 3, 1, 1));

        jPanel915.setPreferredSize(new java.awt.Dimension(50, 100));
        jLabel15.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel15.setText("Pond\u00e9ration");
        jLabel15.setToolTipText("crit\u00e8re d'importance pour la combinaison des methodes ");
        jLabel15.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jPanel915.add(jLabel15);

        jLabel525.setBackground(new java.awt.Color(0, 0, 0));
        jLabel525.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel525.setText("Type de centre");
        jPanel915.add(jLabel525);

        jLabel415.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel415.setText("Pr\u00e9cision");
        jPanel915.add(jLabel415);

        jSlider18.setMajorTickSpacing(1);
        jSlider18.setMaximum(2);
        jSlider18.setMinorTickSpacing(1);
        jSlider18.setPaintLabels(true);
        jSlider18.setSnapToTicks(true);
        jSlider18.setValue(1);
        jSlider18.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jSlider18);

        jCheckBox175.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBox175.setText(" +");
        jCheckBox175.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>+ </b> </HTML>");
        jCheckBox175.setActionCommand(" + ");
        jCheckBox175.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox175.setBorderPainted(true);
        jCheckBox175.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox175.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel915.add(jCheckBox175);

        jTextField175.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField175.setText("0.0");
        jTextField175.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jTextField175);

        jSlider115.setMajorTickSpacing(1);
        jSlider115.setMaximum(2);
        jSlider115.setMinorTickSpacing(1);
        jSlider115.setPaintLabels(true);
        jSlider115.setSnapToTicks(true);
        jSlider115.setValue(1);
        jSlider115.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jSlider115);

        jCheckBox215.setText(" X");
        jCheckBox215.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> de 4 courants en <b>X<b></HTML>");
        jCheckBox215.setActionCommand(" x ");
        jCheckBox215.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox215.setBorderPainted(true);
        jCheckBox215.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox215.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel915.add(jCheckBox215);

        jTextField215.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField215.setText("0.0");
        jTextField215.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jTextField215);

        jSlider125.setMajorTickSpacing(1);
        jSlider125.setMaximum(2);
        jSlider125.setMinorTickSpacing(1);
        jSlider125.setPaintLabels(true);
        jSlider125.setSnapToTicks(true);
        jSlider125.setValue(1);
        jSlider125.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jSlider125);

        jCheckBox315.setText(" O");
        jCheckBox315.setToolTipText("<HTML>Centre <u>rep\u00e9r\u00e9</u> d'un carr\u00e9 de <b>8</b> courants </HTML>");
        jCheckBox315.setActionCommand(" O ");
        jCheckBox315.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox315.setBorderPainted(true);
        jCheckBox315.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox315.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel915.add(jCheckBox315);

        jTextField315.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField315.setText("0.0");
        jTextField315.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jTextField315);

        jSlider135.setMajorTickSpacing(1);
        jSlider135.setMaximum(2);
        jSlider135.setMinorTickSpacing(1);
        jSlider135.setPaintLabels(true);
        jSlider135.setSnapToTicks(true);
        jSlider135.setValue(1);
        jSlider135.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jSlider135);

        jCheckBox415.setFont(new java.awt.Font("Courier New", 1, 12));
        jCheckBox415.setText(" []");
        jCheckBox415.setToolTipText("Centre d'un CARRE de 4 de courants");
        jCheckBox415.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBox415.setBorderPainted(true);
        jCheckBox415.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBox415.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jPanel915.add(jCheckBox415);

        jTextField415.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField415.setText("0.0");
        jTextField415.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jPanel915.add(jTextField415);

        jPanel51.add(jPanel915, java.awt.BorderLayout.CENTER);

        jPanelF.add(jPanel51);

        jTabbedPaneC.addTab("Vecteurs Centrifuges", jPanelF);

        jPanelOpt.setLayout(new java.awt.GridLayout(10, 1, 0, 5));

        jPanelOpt.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 5, 10, 5)));
        jRadioBtnAffCPile.setText("histogramme");
        btnGrpAffichCentre.add(jRadioBtnAffCPile);
        jRadioBtnAffCPile.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffCPile.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffCPileItemStateChanged(evt);
            }
        });

        jPanelOpt.add(jRadioBtnAffCPile);

        jRadioBtnAffCPileAnime.setText("histogramme anim\u00e9");
        btnGrpAffichCentre.add(jRadioBtnAffCPileAnime);
        jRadioBtnAffCPileAnime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffCPileAnime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffCPileAnimeItemStateChanged(evt);
            }
        });

        jPanelOpt.add(jRadioBtnAffCPileAnime);

        jRadioBtnAffCCamembert.setSelected(true);
        jRadioBtnAffCCamembert.setText("diagramme circulaire");
        btnGrpAffichCentre.add(jRadioBtnAffCCamembert);
        jRadioBtnAffCCamembert.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffCCamembert.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffCCamembertItemStateChanged(evt);
            }
        });

        jPanelOpt.add(jRadioBtnAffCCamembert);

        jRadioBtnAffCCamembertAnime.setText("diagramme circulaire anim\u00e9");
        btnGrpAffichCentre.add(jRadioBtnAffCCamembertAnime);
        jRadioBtnAffCCamembertAnime.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffCCamembertAnime.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffCCamembertAnimeItemStateChanged(evt);
            }
        });

        jPanelOpt.add(jRadioBtnAffCCamembertAnime);

        jCheckBoxCombine.setText("Combiner les m\u00e9thodes g\u00e9ometriques");
        jCheckBoxCombine.setToolTipText("<html> on compte les points de priorit\u00e9 obtenus.<br>on ne retient que les lieux<br>qui totalisent au moinsle seuil suivant:</pre></html>");
        jCheckBoxCombine.setBorder(new javax.swing.border.EtchedBorder());
        jCheckBoxCombine.setBorderPainted(true);
        jCheckBoxCombine.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxCombine.setMargin(new java.awt.Insets(20, 2, 2, 2));
        jCheckBoxCombine.setAutoscrolls(true);
        jCheckBoxCombine.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxCombineItemStateChanged(evt);
            }
        });

        jPanelOpt.add(jCheckBoxCombine);

        jTextFieldCombine.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldCombine.setText("seuil");
        jTextFieldCombine.setToolTipText("seuil minimal de priorit\u00e9 \u00e0 satisfaire pour afficher un point");
        jPanelOpt.add(jTextFieldCombine);

        jTabbedPaneC.addTab("Options", jPanelOpt);

        jPanel2.add(jTabbedPaneC, java.awt.BorderLayout.CENTER);

        jTabbedPaneGeom.addTab("Centre de Ph\u00e9nom\u00e8nes", jPanel2);

        jTabbedPane1.addTab("M\u00e9thode G\u00e9om\u00e9trique", jTabbedPaneGeom);

        jPanelFourmisBasique.setLayout(new java.awt.GridBagLayout());

        jPanelFourmisBasique.setBackground(new java.awt.Color(222, 222, 222));
        jPanelFourmisBasique.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 5, 10, 5)));
        jPanelFourmisBasique.setToolTipText("parametres des fourmis");
        jPanelFourmisBasique.setMinimumSize(new java.awt.Dimension(86, 17));
        jPanelFourmisBasique.setName("fourmis");
        jPanelFourmisBasique.setPreferredSize(new java.awt.Dimension(148, 180));
        jPanelFourmisBasique.setEnabled(false);
        CoeffEvapLabel.setFont(new java.awt.Font("Dialog", 0, 14));
        CoeffEvapLabel.setForeground(new java.awt.Color(106, 71, 176));
        CoeffEvapLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoeffEvapLabel.setText("\u00e9vaporation (0.0 .. 1.0)");
        CoeffEvapLabel.setPreferredSize(new java.awt.Dimension(119, 14));
        CoeffEvapLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(CoeffEvapLabel, gridBagConstraints);

        jTextFieldCoeffEvap.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldCoeffEvap.setText("0.5");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jTextFieldCoeffEvap, gridBagConstraints);

        QtePheromoneLabel.setFont(new java.awt.Font("Dialog", 0, 14));
        QtePheromoneLabel.setForeground(new java.awt.Color(106, 71, 176));
        QtePheromoneLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        QtePheromoneLabel.setText("d\u00e9p\u00f4t ph\u00e9romone");
        QtePheromoneLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(QtePheromoneLabel, gridBagConstraints);

        jTextFieldDepotPheromone.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldDepotPheromone.setText("10.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jTextFieldDepotPheromone, gridBagConstraints);

        jRadioButtonNbGen.setFont(new java.awt.Font("Dialog", 0, 14));
        jRadioButtonNbGen.setForeground(new java.awt.Color(106, 71, 176));
        jRadioButtonNbGen.setSelected(true);
        jRadioButtonNbGen.setText("G\u00e9n\u00e9rations");
        btnGrpGenFourmisEquipes.add(jRadioButtonNbGen);
        jRadioButtonNbGen.setBorder(null);
        jRadioButtonNbGen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonNbGen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioButtonNbGenItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(jRadioButtonNbGen, gridBagConstraints);

        jTextFieldNbGen.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldNbGen.setText("1000");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jTextFieldNbGen, gridBagConstraints);

        NbFourmisLabel.setFont(new java.awt.Font("Dialog", 0, 14));
        NbFourmisLabel.setForeground(new java.awt.Color(106, 71, 176));
        NbFourmisLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NbFourmisLabel.setText("Esp\u00e8ces");
        NbFourmisLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(NbFourmisLabel, gridBagConstraints);

        jTextFieldNbFourmisDistinctes.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldNbFourmisDistinctes.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jTextFieldNbFourmisDistinctes, gridBagConstraints);

        jCheckBoxBiais.setFont(new java.awt.Font("Dialog", 0, 14));
        jCheckBoxBiais.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxBiais.setText("Courbure [-1.0 ;1.0]");
        jCheckBoxBiais.setBorder(new javax.swing.border.CompoundBorder());
        jCheckBoxBiais.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxBiaisItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(jCheckBoxBiais, gridBagConstraints);

        jTextFieldBiais.setEditable(false);
        jTextFieldBiais.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldBiais.setText("0.0");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jTextFieldBiais, gridBagConstraints);

        jCheckBoxVoirPheromone.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBoxVoirPheromone.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxVoirPheromone.setText("Ph\u00e9romone");
        jCheckBoxVoirPheromone.setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10))));
        jCheckBoxVoirPheromone.setBorderPainted(true);
        jCheckBoxVoirPheromone.setMaximumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirPheromone.setMinimumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirPheromone.setPreferredSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirPheromone.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVoirPheromoneItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanelFourmisBasique.add(jCheckBoxVoirPheromone, gridBagConstraints);

        jCheckBoxVoirBoucles.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBoxVoirBoucles.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxVoirBoucles.setText("Boucles");
        jCheckBoxVoirBoucles.setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10))));
        jCheckBoxVoirBoucles.setBorderPainted(true);
        jCheckBoxVoirBoucles.setMaximumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirBoucles.setMinimumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirBoucles.setPreferredSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirBoucles.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVoirBouclesItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(30, 0, 0, 0);
        jPanelFourmisBasique.add(jCheckBoxVoirBoucles, gridBagConstraints);

        jCheckBoxVoirCentreBoucle.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBoxVoirCentreBoucle.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxVoirCentreBoucle.setText("Centre Boucle");
        jCheckBoxVoirCentreBoucle.setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 10, 10))));
        jCheckBoxVoirCentreBoucle.setBorderPainted(true);
        jCheckBoxVoirCentreBoucle.setMaximumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirCentreBoucle.setMinimumSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirCentreBoucle.setPreferredSize(new java.awt.Dimension(86, 17));
        jCheckBoxVoirCentreBoucle.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxVoirCentreBoucleItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jCheckBoxVoirCentreBoucle, gridBagConstraints);

        jCheckBoxLegendeSpeFourmi.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBoxLegendeSpeFourmi.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxLegendeSpeFourmi.setText("L\u00e9gende");
        jCheckBoxLegendeSpeFourmi.setBorder(new javax.swing.border.CompoundBorder(null, new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 10, 1, 10))));
        jCheckBoxLegendeSpeFourmi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxLegendeSpeFourmiItemStateChanged(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jCheckBoxLegendeSpeFourmi, gridBagConstraints);

        jRadioButtonInitSyst.setFont(new java.awt.Font("Dialog", 0, 14));
        jRadioButtonInitSyst.setForeground(new java.awt.Color(106, 71, 176));
        jRadioButtonInitSyst.setText("Initialisation syst\u00e9matique");
        jRadioButtonInitSyst.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jRadioButtonInitSyst.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DetectionSyst(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(jRadioButtonInitSyst, gridBagConstraints);

        NbFourmisParEspeceLabel.setFont(new java.awt.Font("Dialog", 0, 14));
        NbFourmisParEspeceLabel.setForeground(new java.awt.Color(106, 71, 176));
        NbFourmisParEspeceLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        NbFourmisParEspeceLabel.setText("Nombre de fourmis par esp\u00e8ce");
        NbFourmisParEspeceLabel.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 3, 0);
        jPanelFourmisBasique.add(NbFourmisParEspeceLabel, gridBagConstraints);

        NbFourmisParEspeceTextfield.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        NbFourmisParEspeceTextfield.setText("10");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(NbFourmisParEspeceTextfield, gridBagConstraints);

        jCheckBoxSuivi.setFont(new java.awt.Font("Dialog", 0, 12));
        jCheckBoxSuivi.setForeground(new java.awt.Color(106, 71, 176));
        jCheckBoxSuivi.setText("Suivi");
        jCheckBoxSuivi.setBorder(new javax.swing.border.CompoundBorder());
        jCheckBoxSuivi.setBorderPainted(true);
        jCheckBoxSuivi.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxSuivi.setMaximumSize(new java.awt.Dimension(86, 17));
        jCheckBoxSuivi.setMinimumSize(new java.awt.Dimension(86, 17));
        jCheckBoxSuivi.setPreferredSize(new java.awt.Dimension(86, 17));
        jCheckBoxSuivi.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanelFourmisBasique.add(jCheckBoxSuivi, gridBagConstraints);

        jTabbedPane1.addTab("M\u00e9thode Fourmis", jPanelFourmisBasique);

        jPanelFond.setLayout(new java.awt.GridLayout(15, 1, 10, 2));

        jPanelFond.setBackground(new java.awt.Color(153, 153, 153));
        jPanelFond.setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(5, 5, 5, 5), new java.awt.Color(0, 0, 0)));
        jRadioBtnAffFondRien.setMnemonic('<');
        jRadioBtnAffFondRien.setSelected(true);
        jRadioBtnAffFondRien.setText("couleur unie");
        btnGrpAFFichFond.add(jRadioBtnAffFondRien);
        jRadioBtnAffFondRien.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondRien.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondRienItemStateChanged(evt);
            }
        });

        jPanelFond.add(jRadioBtnAffFondRien);

        jRadioBtnAffFondNS.setText("courant Nord_Sud");
        btnGrpAFFichFond.add(jRadioBtnAffFondNS);
        jRadioBtnAffFondNS.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondNS.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondNSItemStateChanged(evt);
            }
        });

        jPanelFond.add(jRadioBtnAffFondNS);

        jRadioBtnAffFondEO.setText("courant Est_Ouest");
        btnGrpAFFichFond.add(jRadioBtnAffFondEO);
        jRadioBtnAffFondEO.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondEO.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondEOItemStateChanged(evt);
            }
        });

        jPanelFond.add(jRadioBtnAffFondEO);

        jRadioBtnAffFondNorme.setBackground(new java.awt.Color(224, 224, 224));
        jRadioBtnAffFondNorme.setText("force du courant");
        btnGrpAFFichFond.add(jRadioBtnAffFondNorme);
        jRadioBtnAffFondNorme.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondNorme.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondNormeItemStateChanged(evt);
            }
        });

        jPanelFond.add(jRadioBtnAffFondNorme);

        jRadioBtnAffFondCurl.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnAffFondCurl.setText("valeur du Rotationnel");
        btnGrpAFFichFond.add(jRadioBtnAffFondCurl);
        jRadioBtnAffFondCurl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondCurl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondCurlItemStateChanged(evt);

            }
        });

        jPanelFond.add(jRadioBtnAffFondCurl);

        jRadioBtnAffFondDiv.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnAffFondDiv.setText("valeur de la Divergence");
        btnGrpAFFichFond.add(jRadioBtnAffFondDiv);
        jRadioBtnAffFondDiv.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondDiv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondDivItemStateChanged(evt);
            }

        });

        jPanelFond.add(jRadioBtnAffFondDiv);

        jRadioBtnAffFondCurlCU.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnAffFondCurlCU.setText("valeur du Rotationnel (champ unitaire)");
        btnGrpAFFichFond.add(jRadioBtnAffFondCurlCU);
        jRadioBtnAffFondCurlCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondCurlCU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondCurlCUItemStateChanged(evt);
            }
        });

        jPanelFond.add(jRadioBtnAffFondCurlCU);

        jRadioBtnAffFondDivCU.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnAffFondDivCU.setText("valeur de la Divergence (champ unitaire)");
        btnGrpAFFichFond.add(jRadioBtnAffFondDivCU);
        jRadioBtnAffFondDivCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnAffFondDivCU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnAffFondDivCUItemStateChanged(evt);

            }
        });

        jPanelFond.add(jRadioBtnAffFondDivCU);
        jTabbedPanePhysique.addTab("fond", jPanelFond);
        jPanel1.setLayout(new java.awt.BorderLayout(5, 5));
        jPanel916.setLayout(new java.awt.GridLayout(15, 1));
        jPanel916.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(10, 10, 20, 1)));
        jPanel916.setPreferredSize(new java.awt.Dimension(50, 100));
        jCheckBoxExtremaCurl.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBoxExtremaCurl.setText("extrema de Rotationnel");
        jCheckBoxExtremaCurl.setToolTipText("");
        jCheckBoxExtremaCurl.setActionCommand(" + ");
        jCheckBoxExtremaCurl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBoxExtremaCurl.setBorderPainted(true);
        jCheckBoxExtremaCurl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxExtremaCurl.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxExtremaCurl.setMargin(new java.awt.Insets(5, 2, 25, 2));
        jPanel916.add(jCheckBoxExtremaCurl);

        jCheckBoxExtremaCurlCU.setText("extrema de Rotationnel (champ unitaire)");
        jCheckBoxExtremaCurlCU.setToolTipText("");
        jCheckBoxExtremaCurlCU.setActionCommand(" + ");
        jCheckBoxExtremaCurlCU.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBoxExtremaCurlCU.setBorderPainted(true);
        jCheckBoxExtremaCurlCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxExtremaCurlCU.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxExtremaCurlCU.setMargin(new java.awt.Insets(5, 2, 25, 2));
        jPanel916.add(jCheckBoxExtremaCurlCU);

        jCheckBoxExtremaDiv.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBoxExtremaDiv.setText("extrema de Divergence");
        jCheckBoxExtremaDiv.setToolTipText("");
        jCheckBoxExtremaDiv.setActionCommand(" + ");
        jCheckBoxExtremaDiv.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBoxExtremaDiv.setBorderPainted(true);
        jCheckBoxExtremaDiv.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxExtremaDiv.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxExtremaDiv.setMargin(new java.awt.Insets(5, 2, 25, 2));
        jPanel916.add(jCheckBoxExtremaDiv);

        jCheckBoxExtremaDivCU.setText("extrema de Divergence (champ unitaire)");
        jCheckBoxExtremaDivCU.setToolTipText("");
        jCheckBoxExtremaDivCU.setActionCommand(" + ");
        jCheckBoxExtremaDivCU.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBoxExtremaDivCU.setBorderPainted(true);
        jCheckBoxExtremaDivCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jCheckBoxExtremaDivCU.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxExtremaDivCU.setMargin(new java.awt.Insets(5, 2, 25, 2));
        jPanel916.add(jCheckBoxExtremaDivCU);

        jPanel1.add(jPanel916, java.awt.BorderLayout.CENTER);
        jTabbedPanePhysique.addTab("centre", jPanel1);
        jPanel3.setLayout(new java.awt.BorderLayout(5, 5));
        jPanel917.setLayout(new java.awt.GridLayout(15, 1));
        jPanel917.setPreferredSize(new java.awt.Dimension(50, 100));
        jCheckBoxAfficherConcentrationPhysique.setBackground(new java.awt.Color(200, 200, 214));
        jCheckBoxAfficherConcentrationPhysique.setFont(new java.awt.Font("Dialog", 1, 14));
        jCheckBoxAfficherConcentrationPhysique.setText("Trouver les zones concentr\u00e9es :");
        jCheckBoxAfficherConcentrationPhysique.setToolTipText("");
        jCheckBoxAfficherConcentrationPhysique.setActionCommand(" + ");
        jCheckBoxAfficherConcentrationPhysique.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 255)));
        jCheckBoxAfficherConcentrationPhysique.setBorderPainted(true);
        jCheckBoxAfficherConcentrationPhysique.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBoxAfficherConcentrationPhysique.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jCheckBoxAfficherConcentrationPhysique.setMargin(new java.awt.Insets(5, 2, 25, 2));
        jPanel917.add(jCheckBoxAfficherConcentrationPhysique);

        jRadioBtnConcentrationCurl.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnConcentrationCurl.setText("concentration de Rotationnel");
        btnGrpConcentrationPhysique.add(jRadioBtnConcentrationCurl);
        jRadioBtnConcentrationCurl.setBorder(new javax.swing.border.EtchedBorder());
        jRadioBtnConcentrationCurl.setBorderPainted(true);
        jRadioBtnConcentrationCurl.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnConcentrationCurl.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnConcentrationCurlItemStateChanged(evt);
            }
        });

        jPanel917.add(jRadioBtnConcentrationCurl);

        jRadioBtnConcentrationCurlCU.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnConcentrationCurlCU.setText("concentration de Rotationnel (champ unitaire)");
        btnGrpConcentrationPhysique.add(jRadioBtnConcentrationCurlCU);
        jRadioBtnConcentrationCurlCU.setBorder(new javax.swing.border.EtchedBorder());
        jRadioBtnConcentrationCurlCU.setBorderPainted(true);
        jRadioBtnConcentrationCurlCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnConcentrationCurlCU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnConcentrationCurlCUItemStateChanged(evt);
            }
        });

        jPanel917.add(jRadioBtnConcentrationCurlCU);

        jRadioBtnConcentrationDiv.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnConcentrationDiv.setText("concentration de Divergence");
        btnGrpConcentrationPhysique.add(jRadioBtnConcentrationDiv);
        jRadioBtnConcentrationDiv.setBorder(new javax.swing.border.EtchedBorder());
        jRadioBtnConcentrationDiv.setBorderPainted(true);
        jRadioBtnConcentrationDiv.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnConcentrationDiv.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnConcentrationDivItemStateChanged(evt);
            }
        });

        jPanel917.add(jRadioBtnConcentrationDiv);

        jRadioBtnConcentrationDivCU.setBackground(new java.awt.Color(184, 184, 184));
        jRadioBtnConcentrationDivCU.setText("concentration de Divergence (champ unitaire)");
        btnGrpConcentrationPhysique.add(jRadioBtnConcentrationDivCU);
        jRadioBtnConcentrationDivCU.setBorder(new javax.swing.border.EtchedBorder());
        jRadioBtnConcentrationDivCU.setBorderPainted(true);
        jRadioBtnConcentrationDivCU.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnConcentrationDivCU.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnConcentrationDivCUItemStateChanged(evt);
            }
        });

        jPanel917.add(jRadioBtnConcentrationDivCU);

        jPaneltypeSeuil.setLayout(new java.awt.BorderLayout());

        jPaneltypeSeuil.setBackground(new java.awt.Color(199, 211, 249));
        jPaneltypeSeuil.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        jRadioBtnSeuilConcentrationAbsolu.setBackground(new java.awt.Color(199, 211, 249));
        jRadioBtnSeuilConcentrationAbsolu.setText("seuil absolu");
        btnGrpSeuilConcentrationPhysique.add(jRadioBtnSeuilConcentrationAbsolu);
        jRadioBtnSeuilConcentrationAbsolu.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnSeuilConcentrationAbsolu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnSeuilConcentrationAbsoluItemStateChanged(evt);
            }
        });

        jPaneltypeSeuil.add(jRadioBtnSeuilConcentrationAbsolu, java.awt.BorderLayout.WEST);
        jRadioBtnSeuilConcentrationProportionnel.setBackground(new java.awt.Color(199, 211, 249));
        jRadioBtnSeuilConcentrationProportionnel.setText("seuil % max");
        jRadioBtnSeuilConcentrationProportionnel.setToolTipText("ce seuil est compris entre 0.0 et 1.0 !");
        btnGrpSeuilConcentrationPhysique.add(jRadioBtnSeuilConcentrationProportionnel);
        jRadioBtnSeuilConcentrationProportionnel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jRadioBtnSeuilConcentrationProportionnel.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jRadioBtnSeuilConcentrationProportionnelItemStateChanged(evt);
            }
        });

        jPaneltypeSeuil.add(jRadioBtnSeuilConcentrationProportionnel, java.awt.BorderLayout.EAST);
        jPanel917.add(jPaneltypeSeuil);
        CoeffSegSeuillabel.setBackground(new java.awt.Color(199, 211, 249));
        CoeffSegSeuillabel.setFont(new java.awt.Font("Dialog", 0, 14));
        CoeffSegSeuillabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoeffSegSeuillabel.setText("seuil de concentration");
        CoeffSegSeuillabel.setToolTipText("soit valeur absolue, soit fraction du maximum : 0..1");
        CoeffSegSeuillabel.setPreferredSize(new java.awt.Dimension(119, 14));
        CoeffSegSeuillabel.setOpaque(true);
        jPanel917.add(CoeffSegSeuillabel);

        jTextFieldSegSeuil.setBackground(new java.awt.Color(229, 231, 249));
        jTextFieldSegSeuil.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldSegSeuil.setText("0.5");
        jPanel917.add(jTextFieldSegSeuil);

        CoeffSegCompactLabel.setFont(new java.awt.Font("Dialog", 0, 14));
        CoeffSegCompactLabel.setForeground(new java.awt.Color(106, 71, 176));
        CoeffSegCompactLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CoeffSegCompactLabel.setText("Compacit\u00e9");
        CoeffSegCompactLabel.setPreferredSize(new java.awt.Dimension(119, 14));
        CoeffSegCompactLabel.setOpaque(true);
        jPanel917.add(CoeffSegCompactLabel);

        jTextFieldSegCompacite.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextFieldSegCompacite.setText("0.5");
        jPanel917.add(jTextFieldSegCompacite);

        jPanel3.add(jPanel917, java.awt.BorderLayout.CENTER);
        jTabbedPanePhysique.addTab("segmentation", jPanel3);
        jTabbedPane1.addTab("M\u00e9thode Physique", jTabbedPanePhysique);
        getContentPane().add(jTabbedPane1, java.awt.BorderLayout.CENTER);

        jPanelUseMethod.setLayout(new javax.swing.BoxLayout(jPanelUseMethod, javax.swing.BoxLayout.X_AXIS));

        jPanelUseMethod.setBorder(new javax.swing.border.TitledBorder(null, "methode(s) utilis\u00e9e(s)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP, new java.awt.Font("Dialog", 1, 12), new java.awt.Color(0, 0, 255)));
        jPanelUseMethod.setPreferredSize(new java.awt.Dimension(156, 60));
        jCheckBoxUseMethodGeom.setText("Geometrie");
        jCheckBoxUseMethodGeom.setToolTipText("cocher ici pour activer cette m\u00e9thode");
        jCheckBoxUseMethodGeom.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jCheckBoxUseMethodGeom.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBoxUseMethodGeom.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUseMethodGeomItemStateChanged(evt);
            }
        });

        jPanelUseMethod.add(jCheckBoxUseMethodGeom);

        jCheckBoxUseMethodFourmi.setSelected(true);
        jCheckBoxUseMethodFourmi.setText("fourmi");
        jCheckBoxUseMethodFourmi.setToolTipText("cocher ici pour activer cette m\u00e9thode");
        jCheckBoxUseMethodFourmi.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jCheckBoxUseMethodFourmi.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jCheckBoxUseMethodFourmi.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBoxUseMethodFourmiItemStateChanged(evt);
            }
        });

        jPanelUseMethod.add(jCheckBoxUseMethodFourmi);
        jCheckBoxUseMethodPhysique.setSelected(true);
        jCheckBoxUseMethodPhysique.setText("Physique");
        jCheckBoxUseMethodPhysique.setToolTipText("cocher ici pour activer cette m\u00e9thode");
        jCheckBoxUseMethodPhysique.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(1, 1, 1, 1)));
        jCheckBoxUseMethodPhysique.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanelUseMethod.add(jCheckBoxUseMethodPhysique);
        getContentPane().add(jPanelUseMethod, java.awt.BorderLayout.SOUTH);

        jMenu1.setBackground(new java.awt.Color(164, 213, 155));
        jMenu1.setText("Carte");
        jMenuItemAjoutCarte.setBackground(new java.awt.Color(164, 213, 155));
        jMenuItemAjoutCarte.setText("ajouter une carte");
        jMenuItemAjoutCarte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAjoutCarteActionPerformed(evt);
            }
        });

        jMenu1.add(jMenuItemAjoutCarte);

        jMenu1.add(jSeparator3);

        jMenuItemAjoutBacth.setText("Ouvrir un batch");
        jMenuItemAjoutBacth.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OuvrirBatch(evt);
            }
        });

        jMenu1.add(jMenuItemAjoutBacth);

        jMenuBar2.add(jMenu1);

        jMenu2.setBackground(new java.awt.Color(203, 242, 203));
        jMenu2.setText("Param\u00e8tres");
        jMenu2.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu2MenuSelected(evt);
            }

            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }

            public void menuCanceled(javax.swing.event.MenuEvent evt) {
                jMenu2MenuCanceled(evt);
            }
        });

        jMenuItemExporterCfg.setBackground(new java.awt.Color(203, 242, 203));
        jMenuItemExporterCfg.setText("exporter");
        jMenuItemExporterCfg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExporterCfgActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemExporterCfg);

        jMenuItemImporterCfg.setBackground(new java.awt.Color(203, 242, 203));
        jMenuItemImporterCfg.setText("importer");
        jMenuItemImporterCfg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemImporterCfgActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemImporterCfg);

        jSeparator1.setBackground(new java.awt.Color(203, 242, 203));
        jMenu2.add(jSeparator1);

        jMenuItemAjouterCfg.setBackground(new java.awt.Color(203, 242, 203));
        jMenuItemAjouterCfg.setText("Enregistrer actuel");
        jMenuItemAjouterCfg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemAjouterCfgActionPerformed(evt);
            }
        });

        jMenu2.add(jMenuItemAjouterCfg);

        jMenu2.add(jSeparator2);

        jMenuBar2.add(jMenu2);

        jMenuFin.setBackground(new java.awt.Color(153, 0, 0));
        jMenuFin.setForeground(new java.awt.Color(200, 200, 200));
        jMenuFin.setText("Terminer");
        jMenuFin.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenuFinMouseClicked(evt);
            }
        });

        jMenuBar2.add(jMenuFin);

        setJMenuBar(jMenuBar2);

        setBounds(0, 0, 308, 532);
    }//GEN-END:initComponents

    private void jRadioBtnConcentrationDivCUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnConcentrationDivCUItemStateChanged
        // Add your handling code here:
        if (jRadioBtnConcentrationDivCU.isSelected()) {
            flagAffich[AFF_ZONE_CONCENTRATION] = constants.physique.DIV_CU;
        }
    }//GEN-LAST:event_jRadioBtnConcentrationDivCUItemStateChanged

    private void jRadioBtnConcentrationDivItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnConcentrationDivItemStateChanged
        // Add your handling code here:
        if (jRadioBtnConcentrationDiv.isSelected()) {
            flagAffich[AFF_ZONE_CONCENTRATION] = constants.physique.DIV;
        }
    }//GEN-LAST:event_jRadioBtnConcentrationDivItemStateChanged

    private void jRadioBtnConcentrationCurlCUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnConcentrationCurlCUItemStateChanged
        // Add your handling code here:
        if (jRadioBtnConcentrationCurlCU.isSelected()) {
            flagAffich[AFF_ZONE_CONCENTRATION] = constants.physique.CURL_CU;
        }
    }//GEN-LAST:event_jRadioBtnConcentrationCurlCUItemStateChanged

    private void jRadioBtnConcentrationCurlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnConcentrationCurlItemStateChanged
        // Add your handling code here:
        if (jRadioBtnConcentrationCurl.isSelected()) {
            flagAffich[AFF_ZONE_CONCENTRATION] = constants.physique.CURL;
        }
    }//GEN-LAST:event_jRadioBtnConcentrationCurlItemStateChanged

    private void jRadioBtnSeuilConcentrationProportionnelItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnSeuilConcentrationProportionnelItemStateChanged
        // Add your handling code here:
        if (jRadioBtnSeuilConcentrationProportionnel.isSelected()) {
            concentrationSeuilAbsolu = false;
        }
    }//GEN-LAST:event_jRadioBtnSeuilConcentrationProportionnelItemStateChanged

    private void jRadioBtnSeuilConcentrationAbsoluItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnSeuilConcentrationAbsoluItemStateChanged
        // Add your handling code here:
        if (jRadioBtnSeuilConcentrationAbsolu.isSelected()) {
            concentrationSeuilAbsolu = true;
        }
    }//GEN-LAST:event_jRadioBtnSeuilConcentrationAbsoluItemStateChanged

    private void jRadioBtnAffFondDivCUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondDivCUItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondDivCU.isSelected()) {
            flagAffich[AFF_FOND] = AFF_DIV_CU;
        }
    }//GEN-LAST:event_jRadioBtnAffFondDivCUItemStateChanged

    private void jRadioBtnAffFondCurlCUItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondCurlCUItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondCurlCU.isSelected()) {
            flagAffich[AFF_FOND] = AFF_CURL_CU;
        }
    }//GEN-LAST:event_jRadioBtnAffFondCurlCUItemStateChanged

    private void jRadioBtnAffFondNormeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondNormeItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondNorme.isSelected()) {
            flagAffich[AFF_FOND] = AFF_NORME;
        }

    }//GEN-LAST:event_jRadioBtnAffFondNormeItemStateChanged

    private void jRadioBtnAffFondEOItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondEOItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondEO.isSelected()) {
            flagAffich[AFF_FOND] = AFF_EST_OUEST;
        }
    }//GEN-LAST:event_jRadioBtnAffFondEOItemStateChanged

    private void jRadioBtnAffFondNSItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondNSItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondNS.isSelected()) {
            flagAffich[AFF_FOND] = AFF_NORD_SUD;
        }
    }//GEN-LAST:event_jRadioBtnAffFondNSItemStateChanged

    private void jRadioBtnAffFondDivItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondDivItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondDiv.isSelected()) {
            flagAffich[AFF_FOND] = AFF_DIV;
        }
    }//GEN-LAST:event_jRadioBtnAffFondDivItemStateChanged

    private void jRadioBtnAffFondCurlItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondCurlItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondCurl.isSelected()) {
            flagAffich[AFF_FOND] = AFF_CURL;
        }
    }//GEN-LAST:event_jRadioBtnAffFondCurlItemStateChanged

    private void jRadioBtnAffFondRienItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffFondRienItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffFondRien.isSelected()) {
            flagAffich[AFF_FOND] = AFF_RIEN;
        }
    }//GEN-LAST:event_jRadioBtnAffFondRienItemStateChanged

    private void DetectionSyst(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DetectionSyst
        if (jRadioButtonInitSyst.isSelected()) {
            jTextFieldNbFourmisDistinctes.setEditable(false);
        } else {
            jTextFieldNbFourmisDistinctes.setEditable(true);
        }
    }//GEN-LAST:event_DetectionSyst

    private void jRadioButtonNbGenItemStateChanged(java.awt.event.ItemEvent evt) {
        // Add your handling code here:
        jTextFieldNbGen.setEditable(jRadioButtonNbGen.isSelected());
    }

    private void OuvrirBatch(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OuvrirBatch
        javax.swing.JFileChooser F = new javax.swing.JFileChooser("./cartes");

        /*F.add(new JTextFil("Carte Type2(en 2 fichiers):-choisir ici celui des vecteurs EstOuest ("+PREFIXE_TYPE_2_VX+"D_M_Y.txt"
         + " ou " + " Choisissez un historique de sauvegarde "));
         */
        F.setDialogTitle("carte : vit.060792 ou U_06_07_92.txt ");
        F.setMultiSelectionEnabled(true);

        int returnVal = F.showOpenDialog(this);
        File[] fichs = null;
        try {
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                fichs = F.getSelectedFiles();
                /*if(fichs!=null)
                 //mem.ajoutBatch(fichs);
                 else
                 System.out.println("Noms de fichiers = null");*/
            }
        } catch (Exception e) {
            System.out.println(" FrmVisu : erreur d'ouverture de carte ");
        }
    }//GEN-LAST:event_OuvrirBatch

    private void jCheckBoxUseMethodGeomItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUseMethodGeomItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBoxUseMethodGeomItemStateChanged

    private void jCheckBoxUseMethodFourmiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxUseMethodFourmiItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBoxUseMethodFourmiItemStateChanged

    private void jCheckBoxLegendeSpeFourmiItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxLegendeSpeFourmiItemStateChanged
        // Add your handling code here:

    }//GEN-LAST:event_jCheckBoxLegendeSpeFourmiItemStateChanged

    private void jCheckBoxVoirCentreBoucleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVoirCentreBoucleItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBoxVoirCentreBoucleItemStateChanged

    private void jCheckBoxVoirBouclesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVoirBouclesItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBoxVoirBouclesItemStateChanged

    private void jCheckBoxVoirPheromoneItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxVoirPheromoneItemStateChanged
        // Add your handling code here:
    }//GEN-LAST:event_jCheckBoxVoirPheromoneItemStateChanged

    private void jCheckBoxBiaisItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxBiaisItemStateChanged
        // Add your handling code here:
        jTextFieldBiais.setEditable(jCheckBoxBiais.isSelected());

    }//GEN-LAST:event_jCheckBoxBiaisItemStateChanged

    private void jMenu2MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu2MenuSelected
        // Supprimer les composants pr?cedents
        System.out.println(" menu item " + jMenu2.getItemCount());
        int i, menu = jMenu2.getItemCount();
        try {
            while (jMenu2.getItemCount() > 5) {
                jMenu2.remove(jMenu2.getItemCount() - 1);
            }

        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }

        // Add ;
        ArrayList nomConfig = mem.getConfigHistoFile().listerNomConfig();
        System.out.println(" listnomOK ");
        JMenuItem jConfigSet = null;
        if ((nomConfig != null) && (nomConfig.size() > 0)) {
            for (i = 0; i < nomConfig.size(); i++) {
                jConfigSet = new javax.swing.JMenuItem((String) nomConfig.get(i));
                jConfigSet.setBackground(jMenu2.getItem(0).getBackground());
                jConfigSet.addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        jConfigSetActionPerformed(evt);
                    }
                });
                jMenu2.add(jConfigSet);
            }
        }
        jConfigSet = null;
    }//GEN-LAST:event_jMenu2MenuSelected

    private void jConfigSetActionPerformed(java.awt.event.ActionEvent evt) {
        // Add your handling code here:
        if (dBug) {
            System.out.println(" clic sur " + ((JMenuItem) (evt.getSource())).getText());
        }
        FrmCommentaireDialogue dial = new FrmCommentaireDialogue(this, true, mem, ((JMenuItem) (evt.getSource())).getText());
        dial.setVisible(true);
        dial = null;
        this.repaint();
    }

    private void jMenu2MenuCanceled(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu2MenuCanceled
        // Add your handling code here:
    }//GEN-LAST:event_jMenu2MenuCanceled

    private void jMenuFinMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenuFinMouseClicked
        fermerFrmConfig();
    }//GEN-LAST:event_jMenuFinMouseClicked

    private void jMenuItemAjouterCfgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAjouterCfgActionPerformed
        ConfigHistoFile historique = mem.getConfigHistoFile();
        JOptionPane JO = new JOptionPane("Sous quel nom sauver les parametres ?",
                JOptionPane.QUESTION_MESSAGE, JOptionPane.DEFAULT_OPTION, null);
        JO.setInitialValue("sauve_par_" + System.getProperty("user.name"));
        String ret = JO.showInputDialog(this, "choix du nom SANS ESPACES ");
        while ((ret == "") || (historique.listerNomConfig().contains(ret)) || (ret.lastIndexOf(" ") != -1)) {
            ret = JO.showInputDialog(this, "choisissez un autre nom SANS ESPACES !");
        }

        String nom = ret;
        ret = JO.showInputDialog(this, "choix du commentaire");
        historique.ajouterConfig(nom, ret, this);

    }//GEN-LAST:event_jMenuItemAjouterCfgActionPerformed

    private void jMenuItemExporterCfgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExporterCfgActionPerformed
        javax.swing.JFileChooser F = new javax.swing.JFileChooser("./cartes");
        F.setDialogTitle(" Choisissez un nom pour l'historique de sauvegarde ");
        int returnVal = F.showSaveDialog(this);
        ConfigHistoFile historique = mem.getConfigHistoFile();
        try {
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                String file = F.getSelectedFile().getAbsolutePath();

                historique.exporterVers(file);
                historique = null;
            }
        } catch (Exception e) {
            System.out.println(" FrmVisu : erreur exporter configHistoFile ");
        }
    }//GEN-LAST:event_jMenuItemExporterCfgActionPerformed

    private void jMenuItemImporterCfgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemImporterCfgActionPerformed
        javax.swing.JFileChooser F = new javax.swing.JFileChooser("./cartes");
        F.setDialogTitle("importer un fichier de configuration");
        int returnVal = F.showOpenDialog(this);
        ConfigHistoFile historique = mem.getConfigHistoFile();
        try {
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                historique.importerDepuis(F.getSelectedFile().getAbsolutePath());
                historique = null;
            }
        } catch (Exception e) {
            System.out.println(" FrmVisu : erreur importer configHistoFile ");
        }
    }//GEN-LAST:event_jMenuItemImporterCfgActionPerformed

    private void jMenuItemAjoutCarteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemAjoutCarteActionPerformed
        // Add your handling code here:
        javax.swing.JFileChooser F = new javax.swing.JFileChooser("./cartes");

        /*F.add(new JTextFil("Carte Type2(en 2 fichiers):-choisir ici celui des vecteurs EstOuest ("+PREFIXE_TYPE_2_VX+"D_M_Y.txt"
         + " ou " + " Choisissez un historique de sauvegarde "));
         */
        F.setDialogTitle("Choisissez un fichier NetCDF");

        int id, returnVal = F.showOpenDialog(this);
        try {
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                id = mem.ajoutCarte(F.getSelectedFile().getAbsolutePath());
            }
        } catch (Exception e) {
            System.out.println(" FrmVisu : erreur d'ouverture de carte ");
        }

    }//GEN-LAST:event_jMenuItemAjoutCarteActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Add your handling code here:
        javax.swing.JFileChooser F = new javax.swing.JFileChooser(".");
        F.setDialogTitle("choisissez un fichier carte");
        int returnVal = F.showOpenDialog(this);

        String nomFichier;
        try {
            if (returnVal == javax.swing.JFileChooser.APPROVE_OPTION) {
                nomFichier = F.getSelectedFile().getAbsolutePath();
                //dossierTravail = F.getCurrentDirectory().getPath();
                /*
                 Liste.addElement(F.getSelectedFile().getName());
                 ListeIndex.addElement(new java.lang.Integer(idCartes + 1));
                 Cartes.setListData(Liste);
                 */
                //fourmisBase.Carte carteFourmisBase = new fourmisBase.Carte(nomFichier, 1, null);
                //carteFourmisBase.show();
                //ListeCartes.addElement(c);
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jSlider16PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jSlider16PropertyChange
        // Add your handling code here:
    }//GEN-LAST:event_jSlider16PropertyChange

    private void jCheckBoxCombineItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBoxCombineItemStateChanged
        // Add your handling code here:
        if (jCheckBoxCombine.isSelected()) {
            this.jRadioBtnAffCCamembert.setEnabled(false);
            this.jRadioBtnAffCCamembertAnime.setEnabled(false);
            this.jRadioBtnAffCPile.setEnabled(false);
            this.jRadioBtnAffCPileAnime.setEnabled(false);
            this.jTextFieldCombine.setEnabled(true);
        } else {
            this.jRadioBtnAffCCamembert.setEnabled(true);
            this.jRadioBtnAffCCamembertAnime.setEnabled(true);
            this.jRadioBtnAffCPile.setEnabled(true);
            this.jRadioBtnAffCPileAnime.setEnabled(true);
            this.jTextFieldCombine.setEnabled(false);
        }
        this.setSliderColor(COLOR_C_NEUTRE);
        this.setLabelColor(COLOR_C_LT_NEUTRE);

    }//GEN-LAST:event_jCheckBoxCombineItemStateChanged

    private void jRadioBtnAffCCamembertAnimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffCCamembertAnimeItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffCCamembertAnime.isSelected()) {
            flagAffich[AFF_CENTRE] = AFF_C_CAMEMBERT_ANIME;
            this.setSliderColor(COLOR_C_CAMEMBERT_ANIME);
            this.setLabelColor(COLOR_C_LT_CAMEMBERT_ANIME);
            System.out.println("Type d'affichage : Diagramme circulaire ANIME; /n appuyez sur Demarrer !");
        }
    }//GEN-LAST:event_jRadioBtnAffCCamembertAnimeItemStateChanged

    private void jRadioBtnAffCCamembertItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffCCamembertItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffCCamembert.isSelected()) {
            flagAffich[AFF_CENTRE] = AFF_C_CAMEMBERT;
            this.setSliderColor(COLOR_C_NEUTRE);
            this.setLabelColor(COLOR_C_LT_NEUTRE);

            System.out.println("Type d'affichage : Diagramme circulaire /n appuyez sur Demarrer !");
        }
    }//GEN-LAST:event_jRadioBtnAffCCamembertItemStateChanged

    private void jRadioBtnAffCPileItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffCPileItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffCPile.isSelected()) {
            flagAffich[AFF_CENTRE] = AFF_C_PILE;
            this.setSliderColor(COLOR_C_NEUTRE);
            this.setLabelColor(COLOR_C_LT_NEUTRE);

            System.out.println("Type d'affichage : Histogramme en pile; /n appuyez sur Demarrer !");
        }
    }//GEN-LAST:event_jRadioBtnAffCPileItemStateChanged

    private void jRadioBtnAffCPileAnimeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jRadioBtnAffCPileAnimeItemStateChanged
        // Add your handling code here:
        if (jRadioBtnAffCPileAnime.isSelected()) {
            flagAffich[AFF_CENTRE] = AFF_C_PILE_ANIME;
            this.setSliderColor(COLOR_C_PILE_ANIME);
            this.setLabelColor(COLOR_C_LT_PILE_ANIME);
            System.out.println("Type d'affichage : Histogramme en pile, ANIME; /n appuyez sur Demarrer !");
        }
    }//GEN-LAST:event_jRadioBtnAffCPileAnimeItemStateChanged

    /**
     * Exit the Application
     */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        fermerFrmConfig();
    }//GEN-LAST:event_exitForm

    private void fermerFrmConfig() {
        System.out.println("Fermeture de FrmConfig");
        mem.retraitDeTouteCarte();
        mem.fin();
        mem = null;
        if (dBug) {
            System.out.println("Mort de FrmConfig");
        }
    }

    public void setLabelColor(java.awt.Color[] col) {
        if (col.length != NB_METHODES) {
            System.out.println(" FrmConfig : pb table de Couleurs pour les etiquettes et onglets  !");
        } else {
            int meth;
            // background des ?tiquettes
            for (meth = 0; meth < 2; meth++) {
                ((JLabel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(0)).setForeground(col[(VECTEURS + meth)]);
                ((JLabel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(0)).setForeground(col[(VECTEURS_TANGENTS + meth)]);
                ((JLabel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(0)).setForeground(col[(VECTEURS_CENTRIFUGES + meth)]);
            }

        }
    }

    public void setSliderColor(java.awt.Color[] col) {
        if (col.length != NB_TYPES * NB_METHODES) {
            System.out.println(" FrmConfig : pb table de Couleurs pour la l?gende !");
        } else {
            int meth, i;
            // background des sliders
            for (meth = 0; meth < 2; meth++) {
                for (i = 0; i < NB_TYPES; i++) {
                    ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setBackground(col[(VECTEURS + meth) * NB_TYPES + i]);
                }
            }
            for (meth = 0; meth < 2; meth++) {
                for (i = 0; i < NB_TYPES; i++) {
                    ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setBackground(col[(VECTEURS_TANGENTS + meth) * NB_TYPES + i]);
                }
            }
            for (meth = 0; meth < 2; meth++) {
                for (i = 0; i < NB_TYPES; i++) {
                    ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setBackground(col[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i]);
                }
            }
        }
    }

    public final boolean[] getCheckBoxC() {
        // boolean[] tb = new boolean[NB_TYPES*NB_METHODES];
        boolean[] tb = new boolean[LENGTH_CFGCENTRE];
        int i, meth;

        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                tb[(VECTEURS + meth) * NB_TYPES + i] = (((AbstractButton) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).isSelected());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                tb[(VECTEURS_TANGENTS + meth) * NB_TYPES + i] = (((AbstractButton) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).isSelected());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                tb[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i] = (((AbstractButton) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).isSelected());
            }
        }
        tb[COMBINER_GC] = jCheckBoxCombine.isSelected();
        return tb;
    }

    public void setInitType(boolean[] b) {
        jRadioButtonInitSyst.setSelected(b[0]);
    }

    public boolean[] getInitType() {
        boolean tmp[] = new boolean[1];
        tmp[0] = jRadioButtonInitSyst.isSelected();
        return tmp;
    }

    public void setCheckBoxC(final boolean[] tab) {

        int i, meth;
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                ((JCheckBox) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).setSelected(tab[(VECTEURS + meth) * NB_TYPES + i]);
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                ((JCheckBox) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).setSelected(tab[(VECTEURS_TANGENTS + meth) * NB_TYPES + i]);
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                ((JCheckBox) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(4 + 3 * i)).setSelected(tab[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i]);
            }
        }
        jCheckBoxCombine.setSelected(tab[COMBINER_GC]);
    }

    public final double[] getLimitC() throws Exception {
        double[] tab = new double[LENGTH_LIMITC];
        int i, meth;

        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                tab[(VECTEURS + meth) * NB_TYPES + i] = java.lang.Double.parseDouble(
                        ((JTextField) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).getText());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                tab[(VECTEURS_TANGENTS + meth) * NB_TYPES + i] = java.lang.Double.parseDouble(
                        ((JTextField) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).getText());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                tab[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i] = java.lang.Double.parseDouble(
                        ((JTextField) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).getText());
            }
        }

        return tab;
    }

    public void setLimitC(final double[] tab) {
        int i, meth;
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                ((JTextField) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).setText(new Double(tab[(VECTEURS + meth) * NB_TYPES + i]).toString());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                ((JTextField) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).setText(new Double(tab[(VECTEURS_TANGENTS + meth) * NB_TYPES + i]).toString());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                ((JTextField) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(5 + 3 * i)).setText(new Double(tab[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i]).toString());
            }
        }

    }

    public void initCombinerGC() {
        int i, meth;

        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMaximum(MAX_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMinimum(MIN_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMajorTickSpacing(1);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintTicks(false);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintLabels(true);

            }
        }

        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMaximum(MAX_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMinimum(MIN_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMajorTickSpacing(1);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintTicks(false);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintLabels(true);
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMinimum(MIN_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMaximum(MAX_COMBINER_GC);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setMajorTickSpacing(1);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintTicks(false);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setPaintLabels(true);
            }
        }
        //this.pack();
        //this.repaint();
    }

    public final int[] getCombinerGC() {
        // boolean[] tb = new boolean[NB_TYPES*NB_METHODES];
        int[] tb = new int[LENGTH_COMBINER_GC];
        int i, meth;

        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                tb[(VECTEURS + meth) * NB_TYPES + i] = (((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).getValue());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                tb[(VECTEURS_TANGENTS + meth) * NB_TYPES + i] = (((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).getValue());
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                tb[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i] = (((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).getValue());
            }
        }

        return tb;
    }

    public void setCombinerGC(final int[] tab) {
        int i, meth;
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelS.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setValue(tab[(VECTEURS + meth) * NB_TYPES + i]);
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_TANGENTS + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelT.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setValue(tab[(VECTEURS_TANGENTS + meth) * NB_TYPES + i]);
            }
        }
        for (meth = 0; meth < 2; meth++) {
            for (i = 0; i < NB_TYPES; i++) {
                //System.out.println((VECTEURS_CENTRIFUGES + meth)*NB_TYPES + i);
                ((JSlider) ((JPanel) ((JPanel) jPanelF.getComponent(0 + meth)).getComponent(1)).getComponent(3 + 3 * i)).setValue(tab[(VECTEURS_CENTRIFUGES + meth) * NB_TYPES + i]);
            }
        }
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////
    public final int[] getFlagAffich() {
        try {
            flagAffich[AFF_COMBINER_GC] = Integer.parseInt(jTextFieldCombine.getText());
        } catch (Exception e) {
            flagAffich[AFF_COMBINER_GC] = 0;
            jTextFieldCombine.setText("entrez un entier ! ");
        }

        return flagAffich;
    }

    ///////////////////////////////////////////////////////////////////////////////////////////////

    public void setFlagAffich(final int[] tab) {
        for (int i = 0; i < flagAffich.length; i++) {
            flagAffich[i] = tab[i];
        }
        switch (flagAffich[AFF_CENTRE]) {
            case AFF_C_CAMEMBERT:
                jRadioBtnAffCCamembert.doClick();
                break;
            case AFF_C_CAMEMBERT_ANIME:
                jRadioBtnAffCCamembertAnime.doClick();
                break;
            case AFF_C_PILE:
                jRadioBtnAffCPile.doClick();
                break;
            case AFF_C_PILE_ANIME:
                jRadioBtnAffCPileAnime.doClick();
                break;
        }
        jTextFieldCombine.setText(Integer.toString(flagAffich[AFF_COMBINER_GC]));
        switch (flagAffich[AFF_FOND]) {
            case AFF_RIEN:
                jRadioBtnAffFondRien.doClick();
                break;
            case AFF_CURL:
                jRadioBtnAffFondCurl.doClick();
                break;
            case AFF_DIV:
                jRadioBtnAffFondDiv.doClick();
                break;
            case AFF_NORD_SUD:
                jRadioBtnAffFondNS.doClick();
                break;
            case AFF_EST_OUEST:
                jRadioBtnAffFondEO.doClick();
                break;
            case AFF_NORME:
                jRadioBtnAffFondNorme.doClick();
                break;
            case AFF_CURL_CU:
                jRadioBtnAffFondCurlCU.doClick();
                break;
            case AFF_DIV_CU:
                jRadioBtnAffFondDivCU.doClick();
                break;

            default: {
            }
        }

        switch (flagAffich[AFF_ZONE_CONCENTRATION]) {
            case AFF_CURL:
                jRadioBtnConcentrationCurl.doClick();
                break;
            case AFF_DIV:
                jRadioBtnConcentrationDiv.doClick();
                break;
            case AFF_CURL_CU:
                jRadioBtnConcentrationCurlCU.doClick();
                break;
            case AFF_DIV_CU:
                jRadioBtnConcentrationDivCU.doClick();
                break;
            default: {
            }
        }

    }

    /////////////////////////////// PHYSIQUE ///////////////////////////////////////////////////////
    public boolean[] getPhysiqueBAff() {
        boolean[] tb = new boolean[constants.physique.LENGTH_PHYSIQUE_BAFF];
        tb[constants.physique.DIV] = jCheckBoxExtremaDiv.isSelected();
        tb[constants.physique.DIV_CU] = jCheckBoxExtremaDivCU.isSelected();
        tb[constants.physique.CURL] = jCheckBoxExtremaCurl.isSelected();
        tb[constants.physique.CURL_CU] = jCheckBoxExtremaCurlCU.isSelected();

        tb[constants.physique.BAFF_CONCENTRATION] = jCheckBoxAfficherConcentrationPhysique.isSelected();
        // concentrationSeuilAbsolu est un booleen maj par click sur jradiobtnSeuilConc..
        tb[constants.physique.CONCENTRATION_SEUIL_ABSOLU] = concentrationSeuilAbsolu;

        return tb;
    }

    public void setPhysiqueBAff(boolean[] tb) {
        jCheckBoxExtremaDiv.setSelected(tb[constants.physique.DIV]);
        jCheckBoxExtremaDivCU.setSelected(tb[constants.physique.DIV_CU]);
        jCheckBoxExtremaCurl.setSelected(tb[constants.physique.CURL]);
        jCheckBoxExtremaCurlCU.setSelected(tb[constants.physique.CURL_CU]);

        jCheckBoxAfficherConcentrationPhysique.setSelected(tb[constants.physique.BAFF_CONCENTRATION]);
        if (tb[constants.physique.CONCENTRATION_SEUIL_ABSOLU]) {
            jRadioBtnSeuilConcentrationAbsolu.doClick();
        } else {
            jRadioBtnSeuilConcentrationProportionnel.doClick();
        }

    }

    // parametrage distant :
    public void setPhysique_Concentration_SeuilAbsolu(boolean choix) {
        concentrationSeuilAbsolu = choix;
        this.setPhysiqueBAff(this.getPhysiqueBAff());
    }

    public void setLimitPhysique(double[] tab) {

        jTextFieldSegSeuil.setText((new Double(tab[constants.physique.LIMIT_SEUIL])).toString());
        jTextFieldSegCompacite.setText((new Double(tab[constants.physique.LIMIT_COMPACITE])).toString());
    }

    public final double[] getLimitPhysique() throws Exception {
        double[] tab = new double[constants.physique.LENGTH_LIMIT_PHYSIQUE];

        tab[constants.physique.LIMIT_SEUIL] = java.lang.Double.parseDouble(jTextFieldSegSeuil.getText());
        tab[constants.physique.LIMIT_COMPACITE] = java.lang.Double.parseDouble(jTextFieldSegCompacite.getText());

        return tab;
    }

    ///////////////////////////////FOURMIS/////////////////////////////////////////////////////////
    public final int[] getFourmiNB() {
        int[] tb = new int[LENGTH_FOURMI_NB];
        tb[FOURMI_NB_GENERATIONS] = Integer.parseInt(jTextFieldNbGen.getText());
        tb[FOURMI_NB_ESPECES] = Integer.parseInt(jTextFieldNbFourmisDistinctes.getText());
        tb[FOURMI_NB_INTRA_ESPECE] = Integer.parseInt(NbFourmisParEspeceTextfield.getText());
        return tb;
    }

    public final boolean[] getFourmiBAff() {
        boolean[] tb = new boolean[LENGTH_FOURMI_BAFF];
        /*
         tb[FOURMI_IMPOSE_COURBURE] = jCheckBoxBiais.isSelected();
       
         tb[FOURMI_AFF_BOUCLES]=jCheckBoxVoirBoucles.isSelected();
         tb[FOURMI_AFF_CENTRES_BOUCLES]=jCheckBoxVoirCentreBoucle.isSelected();
         tb[FOURMI_AFF_LEGENDE]=jCheckBoxLegendeSpeFourmi.isSelected();
         tb[FOURMI_AFF_PHEROMONE] = jCheckBoxVoirPheromone.isSelected();
         tb[FOURMI_AFF_SUIVI] = jCheckBoxSuivi.isSelected();
         */
        return tb;
    }

    public final double[] getFourmiCoeff() {
        double[] tb = new double[LENGTH_FOURMI_COEFF];
        tb[FOURMI_COEFF_EVAPORATION] = Double.parseDouble(jTextFieldCoeffEvap.getText());
        tb[FOURMI_QTE_DEPOT] = Double.parseDouble(jTextFieldDepotPheromone.getText());
        if (jCheckBoxBiais.isSelected()) {
            tb[FOURMI_TAUX_COURBURE] = Double.parseDouble(jTextFieldBiais.getText());
        } else {
            tb[FOURMI_TAUX_COURBURE] = 0.0;
        }
        return tb;
    }

    ///////////////////////////////FOURMIS/////////////////////////////////////////////////////////
    public void setFourmiNB(final int[] tb) {
        jTextFieldNbGen.setText(Integer.toString(tb[FOURMI_NB_GENERATIONS]));
        jTextFieldNbFourmisDistinctes.setText(Integer.toString(tb[FOURMI_NB_ESPECES]));
        NbFourmisParEspeceTextfield.setText(Integer.toString(tb[FOURMI_NB_INTRA_ESPECE]));
    }

    public void setFourmiBAff(final boolean[] tb) {
        /*        
         jCheckBoxBiais.setSelected(tb[FOURMI_IMPOSE_COURBURE]);
         jTextFieldBiais.setEditable(tb[FOURMI_IMPOSE_COURBURE]);
        

         jCheckBoxVoirBoucles.setSelected(tb[FOURMI_AFF_BOUCLES]);
         jCheckBoxVoirCentreBoucle.setSelected(tb[FOURMI_AFF_CENTRES_BOUCLES]);
         jCheckBoxLegendeSpeFourmi.setSelected(tb[FOURMI_AFF_LEGENDE]);
         jCheckBoxVoirPheromone.setSelected(tb[FOURMI_AFF_PHEROMONE]);
         jCheckBoxSuivi.setSelected(tb[FOURMI_AFF_SUIVI]);
         **/
    }

    public void setFourmiCoeff(final double[] tb) {
        jTextFieldCoeffEvap.setText(Double.toString(tb[FOURMI_COEFF_EVAPORATION]));
        jTextFieldDepotPheromone.setText(Double.toString(tb[FOURMI_QTE_DEPOT]));
        jTextFieldBiais.setText(Double.toString(tb[FOURMI_TAUX_COURBURE]));
    }

    ////////////////////////////// GENERAL //////////////////////////////////////////////////////////
    public void setUseMethod(final boolean[] tb) {
        jCheckBoxUseMethodGeom.setSelected(tb[USE_METHOD_GEOMETRIQUE]);
        jCheckBoxUseMethodFourmi.setSelected(tb[USE_METHOD_FOURMI]);
        jCheckBoxUseMethodPhysique.setSelected(tb[USE_METHOD_PHYSIQUE]);
        jCheckBoxSuivi.setSelected(tb[USE_METHOD_STREAMLINES]);
    }

    public final boolean[] getUseMethod() {
        boolean[] tb = new boolean[LENGTH_USE_METHOD];
        tb[USE_METHOD_GEOMETRIQUE] = jCheckBoxUseMethodGeom.isSelected();
        tb[USE_METHOD_FOURMI] = jCheckBoxUseMethodFourmi.isSelected();
        tb[USE_METHOD_PHYSIQUE] = jCheckBoxUseMethodPhysique.isSelected();
        tb[USE_METHOD_STREAMLINES] = jCheckBoxSuivi.isSelected();
        return tb;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanelT;
    private javax.swing.JCheckBox jCheckBoxSuivi;
    private javax.swing.JLabel jLabel5111;
    private javax.swing.JPanel jPanel915;
    private javax.swing.JMenuItem jMenuItemAjoutBacth;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSlider jSlider18;
    private javax.swing.JCheckBox jCheckBox312;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JLabel jLabel411;
    private javax.swing.JTextField jTextField412;
    private javax.swing.JLabel jLabel511;
    private javax.swing.JTextField jTextField172;
    private javax.swing.JTextField jTextField411;
    private javax.swing.JLabel jLabel412;
    private javax.swing.JRadioButton jRadioBtnSeuilConcentrationProportionnel;
    private javax.swing.JPanel jPanelFond;
    private javax.swing.JLabel CoeffSegCompactLabel;
    private javax.swing.ButtonGroup btnGrpConcentrationPhysique;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JRadioButton jRadioBtnAffFondNS;
    private javax.swing.JPanel jPanel916;
    private javax.swing.JRadioButton jRadioBtnAffFondCurl;
    private javax.swing.JCheckBox jCheckBoxExtremaCurlCU;
    private javax.swing.JCheckBox jCheckBoxAfficherConcentrationPhysique;
    private javax.swing.JTextField jTextFieldSegCompacite;
    private javax.swing.JCheckBox jCheckBoxExtremaDivCU;
    private javax.swing.JRadioButton jRadioBtnConcentrationCurl;
    private javax.swing.JTextField jTextFieldSegSeuil;
    private javax.swing.JTabbedPane jTabbedPanePhysique;
    private javax.swing.JRadioButton jRadioBtnAffFondDivCU;
    private javax.swing.JLabel CoeffSegSeuillabel;
    private javax.swing.JRadioButton jRadioBtnConcentrationCurlCU;
    private javax.swing.JRadioButton jRadioBtnAffFondCurlCU;
    private javax.swing.ButtonGroup btnGrpAFFichFond;
    private javax.swing.JCheckBox jCheckBoxUseMethodPhysique;
    private javax.swing.JRadioButton jRadioBtnAffFondEO;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox jCheckBoxExtremaDiv;
    private javax.swing.JPanel jPaneltypeSeuil;
    private javax.swing.JCheckBox jCheckBoxExtremaCurl;
    private javax.swing.JRadioButton jRadioBtnConcentrationDiv;
    private javax.swing.JRadioButton jRadioBtnAffFondDiv;
    private javax.swing.JRadioButton jRadioBtnSeuilConcentrationAbsolu;
    private javax.swing.ButtonGroup btnGrpSeuilConcentrationPhysique;
    private javax.swing.JRadioButton jRadioBtnAffFondNorme;
    private javax.swing.JPanel jPanel917;
    private javax.swing.JRadioButton jRadioBtnConcentrationDivCU;
    private javax.swing.JRadioButton jRadioBtnAffFondRien;
    private javax.swing.JCheckBox jCheckBox313;
    private javax.swing.JTextField jTextField215;
    private javax.swing.JTextField jTextField41;
    private javax.swing.JSlider jSlider121;
    private javax.swing.JSlider jSlider132;
    private javax.swing.JCheckBox jCheckBox21;
    private javax.swing.JPanel jPanel911;
    private javax.swing.JTextField jTextField415;
    private javax.swing.JCheckBox jCheckBox412;
    private javax.swing.JTextField jTextFieldBiais;
    private javax.swing.JPanel jPanel511;
    private javax.swing.JTextField jTextField314;
    private javax.swing.JTextField jTextField213;
    private javax.swing.JCheckBox jCheckBoxUseMethodGeom;
    private javax.swing.JSlider jSlider134;
    private javax.swing.JLabel jLabel521;
    private javax.swing.JCheckBox jCheckBoxVoirCentreBoucle;
    private javax.swing.JTextField jTextField311;
    private javax.swing.JLabel NbFourmisLabel;
    private javax.swing.JSlider jSlider16;
    private javax.swing.JCheckBox jCheckBoxVoirBoucles;
    private javax.swing.JTextField NbFourmisParEspeceTextfield;
    private javax.swing.JPanel jPanelS;
    private javax.swing.JSlider jSlider122;
    private javax.swing.JSlider jSlider133;
    private javax.swing.JMenuItem jMenuItemAjouterCfg;
    private javax.swing.JSlider jSlider15;
    private javax.swing.JTextField jTextField171;
    private javax.swing.JTextField jTextField315;
    private javax.swing.JSlider jSlider124;
    private javax.swing.JTextField jTextField214;
    private javax.swing.JSlider jSlider131;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSlider jSlider17;
    private javax.swing.JTextField jTextField413;
    private javax.swing.JPanel jPanel912;
    private javax.swing.JLabel jLabel522;
    private javax.swing.JRadioButton jRadioBtnAffCPileAnime;
    private javax.swing.JMenuItem jMenuItemImporterCfg;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel914;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JTextField jTextFieldNbFourmisDistinctes;
    private javax.swing.JPanel jPanel913;
    private javax.swing.JTextField jTextField212;
    private javax.swing.JLabel NbFourmisParEspeceLabel;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JSlider jSlider135;
    private javax.swing.JTextField jTextFieldCoeffEvap;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JCheckBox jCheckBox311;
    private javax.swing.JRadioButton jRadioButtonInitSyst;
    private javax.swing.JMenu jMenuFin;
    private javax.swing.JCheckBox jCheckBox173;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JPanel jPanelOpt;
    private javax.swing.JCheckBox jCheckBox17;
    private javax.swing.JPanel jPanelF;
    private javax.swing.JLabel jLabel523;
    private javax.swing.JRadioButton jRadioButtonNbGen;
    private javax.swing.JCheckBox jCheckBox411;
    private javax.swing.JCheckBox jCheckBoxUseMethodFourmi;
    private javax.swing.JTextField jTextField21;
    private javax.swing.JCheckBox jCheckBox172;
    private javax.swing.JRadioButton jRadioBtnAffCCamembert;
    private javax.swing.JTabbedPane jTabbedPaneGeom;
    private javax.swing.JCheckBox jCheckBox414;
    private javax.swing.JSlider jSlider12;
    private javax.swing.JRadioButton jRadioBtnAffCPile;
    private javax.swing.JCheckBox jCheckBox211;
    private javax.swing.JSlider jSlider115;
    private javax.swing.JCheckBox jCheckBox413;
    private javax.swing.JSlider jSlider11;
    private javax.swing.JCheckBox jCheckBox212;
    private javax.swing.JTextField jTextField31;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JCheckBox jCheckBoxLegendeSpeFourmi;
    private javax.swing.JTextField jTextFieldDepotPheromone;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JCheckBox jCheckBox174;
    private javax.swing.JCheckBox jCheckBox213;
    private javax.swing.JCheckBox jCheckBox415;
    private javax.swing.JLabel jLabel414;
    private javax.swing.JSlider jSlider113;
    private javax.swing.JCheckBox jCheckBoxVoirPheromone;
    private javax.swing.JCheckBox jCheckBox41;
    private javax.swing.JPanel jPanelFourmisBasique;
    private javax.swing.JSlider jSlider112;
    private javax.swing.JPanel jPanel81;
    private javax.swing.JLabel jLabel415;
    private javax.swing.JPanel jPanel91;
    private javax.swing.ButtonGroup btnGrpAffichCentre;
    private javax.swing.JMenuItem jMenuItemExporterCfg;
    private javax.swing.JMenuItem jMenuItemAjoutCarte;
    private javax.swing.JCheckBox jCheckBox175;
    private javax.swing.JTextField jTextField211;
    private javax.swing.JTabbedPane jTabbedPaneC;
    private javax.swing.JCheckBox jCheckBox171;
    private javax.swing.JCheckBox jCheckBox315;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JTextField jTextFieldNbGen;
    private javax.swing.JPanel jPanel51;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JCheckBox jCheckBox214;
    private javax.swing.JSlider jSlider13;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JSlider jSlider123;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JPanel jPanel811;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JLabel jLabel311;
    private javax.swing.JCheckBox jCheckBoxBiais;
    private javax.swing.JRadioButton jRadioBtnAffCCamembertAnime;
    private javax.swing.ButtonGroup btnGrpGenFourmisEquipes;
    private javax.swing.JTextField jTextField174;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JCheckBox jCheckBoxCombine;
    private javax.swing.JTextField jTextField414;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel CoeffEvapLabel;
    private javax.swing.JSlider jSlider14;
    private javax.swing.JCheckBox jCheckBox314;
    private javax.swing.JTextField jTextField313;
    private javax.swing.JCheckBox jCheckBox215;
    private javax.swing.JSlider jSlider111;
    private javax.swing.JTextField jTextField173;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField175;
    private javax.swing.JLabel jLabel524;
    private javax.swing.JLabel jLabel413;
    private javax.swing.JLabel QtePheromoneLabel;
    private javax.swing.JLabel jLabel525;
    private javax.swing.JTextField jTextField312;
    private javax.swing.JPanel jPanelUseMethod;
    private javax.swing.JTextField jTextFieldCombine;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JCheckBox jCheckBox31;
    private javax.swing.JSlider jSlider125;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JSlider jSlider114;
    // End of variables declaration//GEN-END:variables

}
